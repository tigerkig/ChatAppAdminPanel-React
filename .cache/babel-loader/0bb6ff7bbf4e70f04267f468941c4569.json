{"ast":null,"code":"var _jsxFileName = \"E:\\\\dev\\\\admin_panel\\\\LocalsAdminPanel\\\\src\\\\components\\\\_dashboard\\\\general-app\\\\AppTotalChart.js\";\nimport { merge } from 'lodash';\nimport { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactApexChart from 'react-apexcharts'; // material\n\nimport { Card, CardHeader, Box, TextField } from '@material-ui/core'; //\n\nimport moment from 'moment';\nimport { BaseOptionChart } from '../../charts'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CHART_DATA = [{\n  category: 'statistics',\n  data: [// { name: 'Active Users', data: [0, 0, 0, 0, 0, 13, 16, 17, 26, 40] },\n  {\n    name: 'Online Users',\n    data: [0, 0, 0, 0, 22, 45, 42, 12, 12, 5]\n  }, {\n    name: 'Registered Users',\n    data: [0, 0, 0, 0, 1, 19, 20, 24, 36, 51]\n  } // { name: 'App Installed', data: [0, 10, 21, 35, 40, 49, 62, 69, 91, 102] },\n  // { name: 'App Download', data: [0, 12, 25, 38, 42, 58, 64, 72, 97, 120] }\n  ]\n}];\nAppTotalChart.propTypes = {\n  chartDate: PropTypes.string\n};\nexport default function AppTotalChart({\n  chartDate\n}) {\n  const [seriesData, setSeriesData] = useState('statistics');\n  const [dateCount, setDateCount] = useState(10);\n  const [chartData, setChartData] = useState([]);\n  useEffect(() => {\n    async function getAnalytics() {\n      if (chartDate) {\n        const dateObj = new Date(chartDate);\n        const newDate = new Date(dateObj.getTime() - (dateCount - 1) * 1000 * 60 * 60 * 24);\n        const fromDate = moment(newDate).format('YYYY-MM-DD');\n        const toDate = charDate;\n        const {\n          data\n        } = await axios.get(`/analytics/logs/${fromDate}/${toDate}`);\n\n        if (data.error) {\n          setChartData([]);\n          return;\n        }\n      }\n    }\n  }, [chartDate]);\n\n  const handleChangeSeriesData = event => {\n    setSeriesData(Number(event.target.value));\n  };\n\n  const daysList = num => {\n    const date = new Date(chartDate);\n    const datesCollection = [];\n\n    for (let i = 0; i < num; i += 1) {\n      const newDate = new Date(date.getTime() - i * 1000 * 60 * 60 * 24);\n      const dateFromatStr = moment(newDate).format('YYYY MMM DD'); // datesCollection.unshift(`${newDate.getDate()}/${newDate.getMonth() + 1}/${newDate.getFullYear()}`);\n\n      datesCollection.unshift(dateFromatStr);\n    }\n\n    return datesCollection;\n  };\n\n  const chartOptions = merge(BaseOptionChart(), {\n    xaxis: {\n      categories: daysList(dateCount)\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      title: \"Statistics Chart\",\n      subheader: \"Growing Fast\" // action={\n      //   <TextField\n      //     select\n      //     fullWidth\n      //     value={seriesData}\n      //     SelectProps={{ native: true }}\n      //     onChange={handleChangeSeriesData}\n      //     sx={{\n      //       '& fieldset': { border: '0 !important' },\n      //       '& select': { pl: 1, py: 0.5, pr: '24px !important', typography: 'subtitle2' },\n      //       '& .MuiOutlinedInput-root': { borderRadius: 0.75, bgcolor: 'background.neutral' },\n      //       '& .MuiNativeSelect-icon': { top: 4, right: 0, width: 20, height: 20 }\n      //     }}\n      //   >\n      //     {CHART_DATA.map((option) => (\n      //       <option key={option.category} value={option.category}>\n      //         {option.category}\n      //       </option>\n      //     ))}\n      //   </TextField>\n      // }\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), chartData.map(item => /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 3,\n        mx: 3\n      },\n      dir: \"ltr\",\n      children: item.category === seriesData && /*#__PURE__*/_jsxDEV(ReactApexChart, {\n        type: \"line\",\n        series: item.data,\n        options: chartOptions,\n        height: 364\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this)\n    }, item.category, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["E:/dev/admin_panel/LocalsAdminPanel/src/components/_dashboard/general-app/AppTotalChart.js"],"names":["merge","useEffect","useState","PropTypes","ReactApexChart","Card","CardHeader","Box","TextField","moment","BaseOptionChart","CHART_DATA","category","data","name","AppTotalChart","propTypes","chartDate","string","seriesData","setSeriesData","dateCount","setDateCount","chartData","setChartData","getAnalytics","dateObj","Date","newDate","getTime","fromDate","format","toDate","charDate","axios","get","error","handleChangeSeriesData","event","Number","target","value","daysList","num","date","datesCollection","i","dateFromatStr","unshift","chartOptions","xaxis","categories","map","item","mt","mx"],"mappings":"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","sourcesContent":["import { merge } from 'lodash';\nimport { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactApexChart from 'react-apexcharts';\n// material\nimport { Card, CardHeader, Box, TextField } from '@material-ui/core';\n//\nimport moment from 'moment';\nimport { BaseOptionChart } from '../../charts';\n\n// ----------------------------------------------------------------------\n\nconst CHART_DATA = [\n  {\n    category: 'statistics',\n    data: [\n      // { name: 'Active Users', data: [0, 0, 0, 0, 0, 13, 16, 17, 26, 40] },\n      { name: 'Online Users', data: [0, 0, 0, 0, 22, 45, 42, 12, 12, 5] },\n      { name: 'Registered Users', data: [0, 0, 0, 0, 1, 19, 20, 24, 36, 51] }\n      // { name: 'App Installed', data: [0, 10, 21, 35, 40, 49, 62, 69, 91, 102] },\n      // { name: 'App Download', data: [0, 12, 25, 38, 42, 58, 64, 72, 97, 120] }\n    ]\n  }\n];\n\nAppTotalChart.propTypes = {\n  chartDate: PropTypes.string\n};\n\nexport default function AppTotalChart({ chartDate }) {\n  const [seriesData, setSeriesData] = useState('statistics');\n  const [dateCount, setDateCount] = useState(10);\n  const [chartData, setChartData] = useState([]);\n\n  useEffect(() => {\n    async function getAnalytics() {\n      if (chartDate) {\n        const dateObj = new Date(chartDate);\n        const newDate = new Date(dateObj.getTime() - (dateCount - 1) * 1000 * 60 * 60 * 24);\n        const fromDate = moment(newDate).format('YYYY-MM-DD');\n        const toDate = charDate;\n        const { data } = await axios.get(`/analytics/logs/${fromDate}/${toDate}`);\n        if (data.error) {\n          setChartData([]);\n          return;\n        }\n      }\n    }\n  }, [chartDate]);\n\n  const handleChangeSeriesData = (event) => {\n    setSeriesData(Number(event.target.value));\n  };\n\n  const daysList = (num) => {\n    const date = new Date(chartDate);\n    const datesCollection = [];\n\n    for (let i = 0; i < num; i += 1) {\n      const newDate = new Date(date.getTime() - i * 1000 * 60 * 60 * 24);\n      const dateFromatStr = moment(newDate).format('YYYY MMM DD');\n      // datesCollection.unshift(`${newDate.getDate()}/${newDate.getMonth() + 1}/${newDate.getFullYear()}`);\n      datesCollection.unshift(dateFromatStr);\n    }\n\n    return datesCollection;\n  };\n\n  const chartOptions = merge(BaseOptionChart(), {\n    xaxis: {\n      categories: daysList(dateCount)\n    }\n  });\n\n  return (\n    <Card>\n      <CardHeader\n        title=\"Statistics Chart\"\n        subheader=\"Growing Fast\"\n        // action={\n        //   <TextField\n        //     select\n        //     fullWidth\n        //     value={seriesData}\n        //     SelectProps={{ native: true }}\n        //     onChange={handleChangeSeriesData}\n        //     sx={{\n        //       '& fieldset': { border: '0 !important' },\n        //       '& select': { pl: 1, py: 0.5, pr: '24px !important', typography: 'subtitle2' },\n        //       '& .MuiOutlinedInput-root': { borderRadius: 0.75, bgcolor: 'background.neutral' },\n        //       '& .MuiNativeSelect-icon': { top: 4, right: 0, width: 20, height: 20 }\n        //     }}\n        //   >\n        //     {CHART_DATA.map((option) => (\n        //       <option key={option.category} value={option.category}>\n        //         {option.category}\n        //       </option>\n        //     ))}\n        //   </TextField>\n        // }\n      />\n\n      {chartData.map((item) => (\n        <Box key={item.category} sx={{ mt: 3, mx: 3 }} dir=\"ltr\">\n          {item.category === seriesData && (\n            <ReactApexChart type=\"line\" series={item.data} options={chartOptions} height={364} />\n          )}\n        </Box>\n      ))}\n    </Card>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}