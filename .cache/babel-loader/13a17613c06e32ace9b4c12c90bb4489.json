{"ast":null,"code":"var _jsxFileName = \"E:\\\\dev\\\\admin_panel\\\\LocalsAdminPanel\\\\src\\\\pages\\\\dashboard\\\\ProhibitedWordCreate.js\";\nimport { useEffect } from 'react';\nimport { paramCase } from 'change-case';\nimport { useParams, useLocation } from 'react-router-dom'; // material\n\nimport { Container } from '@material-ui/core'; // redux\n\nimport { useDispatch, useSelector } from '../../redux/store';\nimport { getSettingsList } from '../../redux/slices/settings';\nimport { getWordList } from '../../redux/slices/prohibitedword'; // routes\n\nimport { PATH_DASHBOARD } from '../../routes/paths'; // hooks\n\nimport useSettings from '../../hooks/useSettings'; // components\n\nimport Page from '../../components/Page';\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\nimport ProhibitedWordNewForm from '../../components/_dashboard/prohibited-words/ProhibitedWordNewForm';\nimport ProhibitedWordMessageForm from '../../components/_dashboard/prohibited-words/ProhibitedWordMessageForm.js'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ProhibitedWordCreate() {\n  const {\n    themeStretch\n  } = useSettings();\n  const dispatch = useDispatch();\n  const {\n    settingsList\n  } = useSelector(state => state.setting);\n  const prohibitedWordSettings = settingsList.find(settingRow => settingRow.type === 'prohibited_word');\n  const {\n    pathname\n  } = useLocation();\n  const {\n    word\n  } = useParams();\n  const {\n    wordList\n  } = useSelector(state => state.prohibatedword);\n  const isEdit = pathname.includes('edit');\n  const currentWord = wordList.find(prohibitedwords => paramCase(prohibitedwords.word) === word);\n  useEffect(() => {\n    dispatch(getSettingsList());\n    dispatch(getWordList());\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(Page, {\n    title: \"User: Create a new user | Locals\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: themeStretch ? false : 'lg',\n      children: [/*#__PURE__*/_jsxDEV(HeaderBreadcrumbs, {\n        heading: !isEdit ? 'Create a new prohibited word' : 'Edit prohibited word',\n        links: [{\n          name: 'List of Prohibited Words',\n          href: PATH_DASHBOARD.prohibitedwords.root\n        }]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ProhibitedWordMessageForm, {\n        prohibitedWordSettings: prohibitedWordSettings\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ProhibitedWordNewForm, {\n        isEdit: isEdit,\n        currentWord: currentWord\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["E:/dev/admin_panel/LocalsAdminPanel/src/pages/dashboard/ProhibitedWordCreate.js"],"names":["useEffect","paramCase","useParams","useLocation","Container","useDispatch","useSelector","getSettingsList","getWordList","PATH_DASHBOARD","useSettings","Page","HeaderBreadcrumbs","ProhibitedWordNewForm","ProhibitedWordMessageForm","ProhibitedWordCreate","themeStretch","dispatch","settingsList","state","setting","prohibitedWordSettings","find","settingRow","type","pathname","word","wordList","prohibatedword","isEdit","includes","currentWord","prohibitedwords","name","href","root"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,kBAAvC,C,CACA;;AACA,SAASC,SAAT,QAA0B,mBAA1B,C,CACA;;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,mBAAzC;AACA,SAASC,eAAT,QAAgC,6BAAhC;AACA,SAASC,WAAT,QAA4B,mCAA5B,C,CACA;;AACA,SAASC,cAAT,QAA+B,oBAA/B,C,CACA;;AACA,OAAOC,WAAP,MAAwB,yBAAxB,C,CACA;;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,iBAAP,MAA8B,oCAA9B;AACA,OAAOC,qBAAP,MAAkC,oEAAlC;AACA,OAAOC,yBAAP,MAAsC,2EAAtC,C,CAEA;;;AAEA,eAAe,SAASC,oBAAT,GAAgC;AAC7C,QAAM;AAAEC,IAAAA;AAAF,MAAmBN,WAAW,EAApC;AACA,QAAMO,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAmBZ,WAAW,CAAEa,KAAD,IAAWA,KAAK,CAACC,OAAlB,CAApC;AACA,QAAMC,sBAAsB,GAAGH,YAAY,CAACI,IAAb,CAAmBC,UAAD,IAAgBA,UAAU,CAACC,IAAX,KAAoB,iBAAtD,CAA/B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAetB,WAAW,EAAhC;AACA,QAAM;AAAEuB,IAAAA;AAAF,MAAWxB,SAAS,EAA1B;AACA,QAAM;AAAEyB,IAAAA;AAAF,MAAerB,WAAW,CAAEa,KAAD,IAAWA,KAAK,CAACS,cAAlB,CAAhC;AACA,QAAMC,MAAM,GAAGJ,QAAQ,CAACK,QAAT,CAAkB,MAAlB,CAAf;AACA,QAAMC,WAAW,GAAGJ,QAAQ,CAACL,IAAT,CAAeU,eAAD,IAAqB/B,SAAS,CAAC+B,eAAe,CAACN,IAAjB,CAAT,KAAoCA,IAAvE,CAApB;AAEA1B,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,QAAQ,CAACV,eAAe,EAAhB,CAAR;AACAU,IAAAA,QAAQ,CAACT,WAAW,EAAZ,CAAR;AACD,GAHQ,EAGN,CAACS,QAAD,CAHM,CAAT;AAKA,sBACE,QAAC,IAAD;AAAM,IAAA,KAAK,EAAC,kCAAZ;AAAA,2BACE,QAAC,SAAD;AAAW,MAAA,QAAQ,EAAED,YAAY,GAAG,KAAH,GAAW,IAA5C;AAAA,8BACE,QAAC,iBAAD;AACE,QAAA,OAAO,EAAE,CAACa,MAAD,GAAU,8BAAV,GAA2C,sBADtD;AAEE,QAAA,KAAK,EAAE,CAAC;AAAEI,UAAAA,IAAI,EAAE,0BAAR;AAAoCC,UAAAA,IAAI,EAAEzB,cAAc,CAACuB,eAAf,CAA+BG;AAAzE,SAAD;AAFT;AAAA;AAAA;AAAA;AAAA,cADF,eAKE,QAAC,yBAAD;AAA2B,QAAA,sBAAsB,EAAEd;AAAnD;AAAA;AAAA;AAAA;AAAA,cALF,eAME,QAAC,qBAAD;AAAuB,QAAA,MAAM,EAAEQ,MAA/B;AAAuC,QAAA,WAAW,EAAEE;AAApD;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAYD","sourcesContent":["import { useEffect } from 'react';\nimport { paramCase } from 'change-case';\nimport { useParams, useLocation } from 'react-router-dom';\n// material\nimport { Container } from '@material-ui/core';\n// redux\nimport { useDispatch, useSelector } from '../../redux/store';\nimport { getSettingsList } from '../../redux/slices/settings';\nimport { getWordList } from '../../redux/slices/prohibitedword';\n// routes\nimport { PATH_DASHBOARD } from '../../routes/paths';\n// hooks\nimport useSettings from '../../hooks/useSettings';\n// components\nimport Page from '../../components/Page';\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\nimport ProhibitedWordNewForm from '../../components/_dashboard/prohibited-words/ProhibitedWordNewForm';\nimport ProhibitedWordMessageForm from '../../components/_dashboard/prohibited-words/ProhibitedWordMessageForm.js';\n\n// ----------------------------------------------------------------------\n\nexport default function ProhibitedWordCreate() {\n  const { themeStretch } = useSettings();\n  const dispatch = useDispatch();\n  const { settingsList } = useSelector((state) => state.setting);\n  const prohibitedWordSettings = settingsList.find((settingRow) => settingRow.type === 'prohibited_word');\n  const { pathname } = useLocation();\n  const { word } = useParams();\n  const { wordList } = useSelector((state) => state.prohibatedword);\n  const isEdit = pathname.includes('edit');\n  const currentWord = wordList.find((prohibitedwords) => paramCase(prohibitedwords.word) === word);\n\n  useEffect(() => {\n    dispatch(getSettingsList());\n    dispatch(getWordList());\n  }, [dispatch]);\n\n  return (\n    <Page title=\"User: Create a new user | Locals\">\n      <Container maxWidth={themeStretch ? false : 'lg'}>\n        <HeaderBreadcrumbs\n          heading={!isEdit ? 'Create a new prohibited word' : 'Edit prohibited word'}\n          links={[{ name: 'List of Prohibited Words', href: PATH_DASHBOARD.prohibitedwords.root }]}\n        />\n        <ProhibitedWordMessageForm prohibitedWordSettings={prohibitedWordSettings} />\n        <ProhibitedWordNewForm isEdit={isEdit} currentWord={currentWord} />\n      </Container>\n    </Page>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}