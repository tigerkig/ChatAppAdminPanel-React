{"ast":null,"code":"var _jsxFileName = \"E:\\\\dev\\\\admin_panel\\\\LocalsAdminPanel\\\\src\\\\components\\\\_dashboard\\\\privatechat\\\\ChatWindow.js\";\nimport { useEffect } from 'react';\nimport { useNavigate, useParams, useLocation } from 'react-router-dom'; // material\n\nimport { Box, Divider } from '@material-ui/core'; // redux\n\nimport { useDispatch, useSelector } from '../../../redux/store';\nimport { addRecipients, onSendMessage, getConversation, getParticipants, markConversationAsRead, resetActiveConversation } from '../../../redux/slices/privatechat';\nimport { getSettingsList } from '../../../redux/slices/settings'; // routes\n\nimport { PATH_DASHBOARD } from '../../../routes/paths'; //\n// import ChatRoom from './ChatRoom';\n\nimport ChatMessageList from './ChatMessageList';\nimport ChatHeaderDetail from './ChatHeaderDetail';\nimport ChatMessageInput from './ChatMessageInput';\nimport ChatHeaderCompose from './ChatHeaderCompose'; // hooks\n\nimport useAuth from '../../../hooks/useAuth'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst conversationSelector = state => {\n  const {\n    conversations,\n    activeConversationId\n  } = state.privatechat;\n  const conversation = conversations.byId[activeConversationId];\n\n  if (conversation) {\n    return conversation;\n  }\n\n  return {\n    id: null,\n    messages: [],\n    lastMessage: null,\n    users: []\n  };\n};\n\nexport default function ChatWindow({\n  socket\n}) {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const {\n    user\n  } = useAuth();\n  const {\n    pathname\n  } = useLocation();\n  const {\n    opponentId\n  } = useParams();\n  const {\n    contacts,\n    recipients,\n    participants,\n    activeConversationId\n  } = useSelector(state => state.privatechat);\n  const conversation = useSelector(state => conversationSelector(state));\n  const {\n    settingsList\n  } = useSelector(state => state.setting);\n  const parameterSettings = settingsList.find(settingRow => settingRow.type === 'parameter');\n  useEffect(() => {\n    dispatch(getSettingsList());\n  }, [dispatch]);\n  const mode = opponentId ? 'DETAIL' : 'COMPOSE';\n  const displayParticipants = participants.filter(item => item._id !== '8864c717-587d-472a-929a-8e5f298024da-0');\n  useEffect(() => {\n    if (activeConversationId) {\n      console.log('get conversation', activeConversationId);\n      dispatch(getConversation(activeConversationId)); // dispatch(markConversationAsRead(activeConversationId));\n    }\n  }, [dispatch, activeConversationId]);\n  useEffect(() => {\n    // console.log(conversation);\n    if (conversation.lastMessage && conversation.lastMessage.users_see_message.indexOf(user._id) === -1) {\n      socket.emit('makeLastMessageAsSeen', JSON.stringify({\n        chatId: activeConversationId,\n        userId: user._id\n      }));\n    }\n  }, [dispatch, conversation]);\n\n  const handleAddRecipient = recipient => {\n    dispatch(addRecipients(recipient));\n  };\n\n  const handleSendMessage = async value => {\n    try {\n      dispatch(onSendMessage(value));\n      const message = {\n        sender_id: value.senderId,\n        sender_name: value.senderName,\n        messageId: value.messageId,\n        chat_id: value.conversationId,\n        message: value.message,\n        receiver_id: value.receiverId,\n        message_type: value.messageType,\n        imgs: value.imgs\n      };\n      console.log('socket new message', message);\n      socket.emit('new_message', JSON.stringify(message));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      flexGrow: 1,\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    children: [/*#__PURE__*/_jsxDEV(ChatHeaderDetail, {\n      participants: displayParticipants\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        flexGrow: 1,\n        display: 'flex',\n        overflow: 'hidden'\n      },\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          flexGrow: 1,\n          flexDirection: 'column'\n        },\n        children: [/*#__PURE__*/_jsxDEV(ChatMessageList, {\n          conversation: conversation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChatMessageInput, {\n          conversationId: activeConversationId,\n          opponentId: opponentId,\n          onSend: handleSendMessage,\n          disabled: pathname === PATH_DASHBOARD.chat.private,\n          messageMaxLen: parameterSettings && Number(parameterSettings.settings.message_limit_character_num)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["E:/dev/admin_panel/LocalsAdminPanel/src/components/_dashboard/privatechat/ChatWindow.js"],"names":["useEffect","useNavigate","useParams","useLocation","Box","Divider","useDispatch","useSelector","addRecipients","onSendMessage","getConversation","getParticipants","markConversationAsRead","resetActiveConversation","getSettingsList","PATH_DASHBOARD","ChatMessageList","ChatHeaderDetail","ChatMessageInput","ChatHeaderCompose","useAuth","conversationSelector","state","conversations","activeConversationId","privatechat","conversation","byId","id","messages","lastMessage","users","ChatWindow","socket","dispatch","navigate","user","pathname","opponentId","contacts","recipients","participants","settingsList","setting","parameterSettings","find","settingRow","type","mode","displayParticipants","filter","item","_id","console","log","users_see_message","indexOf","emit","JSON","stringify","chatId","userId","handleAddRecipient","recipient","handleSendMessage","value","message","sender_id","senderId","sender_name","senderName","messageId","chat_id","conversationId","receiver_id","receiverId","message_type","messageType","imgs","error","flexGrow","display","flexDirection","overflow","chat","private","Number","settings","message_limit_character_num"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\n// material\nimport { Box, Divider } from '@material-ui/core';\n// redux\nimport { useDispatch, useSelector } from '../../../redux/store';\nimport {\n  addRecipients,\n  onSendMessage,\n  getConversation,\n  getParticipants,\n  markConversationAsRead,\n  resetActiveConversation\n} from '../../../redux/slices/privatechat';\nimport { getSettingsList } from '../../../redux/slices/settings';\n// routes\nimport { PATH_DASHBOARD } from '../../../routes/paths';\n//\n// import ChatRoom from './ChatRoom';\nimport ChatMessageList from './ChatMessageList';\nimport ChatHeaderDetail from './ChatHeaderDetail';\nimport ChatMessageInput from './ChatMessageInput';\nimport ChatHeaderCompose from './ChatHeaderCompose';\n// hooks\nimport useAuth from '../../../hooks/useAuth';\n\n// ----------------------------------------------------------------------\n\nconst conversationSelector = (state) => {\n  const { conversations, activeConversationId } = state.privatechat;\n  const conversation = conversations.byId[activeConversationId];\n  if (conversation) {\n    return conversation;\n  }\n  return {\n    id: null,\n    messages: [],\n    lastMessage: null,\n    users: []\n  };\n};\n\nexport default function ChatWindow({ socket }) {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { user } = useAuth();\n  const { pathname } = useLocation();\n  const { opponentId } = useParams();\n  const { contacts, recipients, participants, activeConversationId } = useSelector((state) => state.privatechat);\n  const conversation = useSelector((state) => conversationSelector(state));\n\n  const { settingsList } = useSelector((state) => state.setting);\n  const parameterSettings = settingsList.find((settingRow) => settingRow.type === 'parameter');\n\n  useEffect(() => {\n    dispatch(getSettingsList());\n  }, [dispatch]);\n\n  const mode = opponentId ? 'DETAIL' : 'COMPOSE';\n\n  const displayParticipants = participants.filter((item) => item._id !== '8864c717-587d-472a-929a-8e5f298024da-0');\n\n  useEffect(() => {\n    if (activeConversationId) {\n      console.log('get conversation', activeConversationId);\n      dispatch(getConversation(activeConversationId));\n      // dispatch(markConversationAsRead(activeConversationId));\n    }\n  }, [dispatch, activeConversationId]);\n\n  useEffect(() => {\n    // console.log(conversation);\n    if (conversation.lastMessage && conversation.lastMessage.users_see_message.indexOf(user._id) === -1) {\n      socket.emit('makeLastMessageAsSeen', JSON.stringify({ chatId: activeConversationId, userId: user._id }));\n    }\n  }, [dispatch, conversation]);\n\n  const handleAddRecipient = (recipient) => {\n    dispatch(addRecipients(recipient));\n  };\n\n  const handleSendMessage = async (value) => {\n    try {\n      dispatch(onSendMessage(value));\n      const message = {\n        sender_id: value.senderId,\n        sender_name: value.senderName,\n        messageId: value.messageId,\n        chat_id: value.conversationId,\n        message: value.message,\n        receiver_id: value.receiverId,\n        message_type: value.messageType,\n        imgs: value.imgs\n      };\n      console.log('socket new message', message);\n      socket.emit('new_message', JSON.stringify(message));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <Box sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column' }}>\n      {/* {mode === 'DETAIL' ? (\n        <ChatHeaderDetail participants={displayParticipants} />\n      ) : (\n        <ChatHeaderCompose\n          recipients={recipients}\n          contacts={Object.values(contacts.byId)}\n          onAddRecipient={handleAddRecipient}\n        />\n      )} */}\n      <ChatHeaderDetail participants={displayParticipants} />\n\n      <Divider />\n\n      <Box sx={{ flexGrow: 1, display: 'flex', overflow: 'hidden' }}>\n        <Box sx={{ display: 'flex', flexGrow: 1, flexDirection: 'column' }}>\n          <ChatMessageList conversation={conversation} />\n\n          <Divider />\n\n          <ChatMessageInput\n            conversationId={activeConversationId}\n            opponentId={opponentId}\n            onSend={handleSendMessage}\n            disabled={pathname === PATH_DASHBOARD.chat.private}\n            messageMaxLen={parameterSettings && Number(parameterSettings.settings.message_limit_character_num)}\n          />\n        </Box>\n\n        {/* {mode === 'DETAIL' && <ChatRoom conversation={conversation} participants={displayParticipants} />} */}\n      </Box>\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}