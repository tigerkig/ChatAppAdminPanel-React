{"ast":null,"code":"var _jsxFileName = \"E:\\\\dev\\\\admin_panel\\\\LocalsAdminPanel\\\\src\\\\components\\\\_dashboard\\\\privatechat\\\\ChatWindow.js\";\nimport { useEffect, useState } from 'react';\nimport { useNavigate, useParams, useLocation } from 'react-router-dom'; // material\n\nimport { Box, Divider } from '@material-ui/core'; // redux\n\nimport { useDispatch, useSelector } from '../../../redux/store';\nimport { addRecipients, onSendMessage, getConversation, getParticipants, markConversationAsRead, resetActiveConversation } from '../../../redux/slices/privatechat'; // routes\n\nimport { PATH_DASHBOARD } from '../../../routes/paths'; //\n\nimport ChatRoom from './ChatRoom';\nimport ChatMessageList from './ChatMessageList';\nimport ChatHeaderDetail from './ChatHeaderDetail';\nimport ChatMessageInput from './ChatMessageInput';\nimport ChatHeaderCompose from './ChatHeaderCompose'; // hooks\n\nimport useAuth from '../../../hooks/useAuth'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst conversationSelector = state => {\n  const {\n    conversations,\n    activeConversationId\n  } = state.privatechat;\n  const conversation = conversations.byId[activeConversationId];\n\n  if (conversation) {\n    return conversation;\n  }\n\n  return {\n    id: null,\n    messages: [],\n    lastMessage: null,\n    users: []\n  };\n};\n\nexport default function ChatWindow({\n  socket\n}) {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const {\n    user\n  } = useAuth();\n  const {\n    pathname\n  } = useLocation();\n  const {\n    opponentId\n  } = useParams();\n  const {\n    contacts,\n    recipients,\n    participants,\n    activeConversationId\n  } = useSelector(state => state.privatechat);\n  const conversation = useSelector(state => conversationSelector(state));\n  const [currentConversationId, setCurrentCoversationId] = useState(null);\n  const mode = opponentId ? 'DETAIL' : 'COMPOSE';\n  const displayParticipants = participants.filter(item => item._id !== '8864c717-587d-472a-929a-8e5f298024da-0');\n  useEffect(() => {\n    if (activeConversationId) {\n      console.log('get conversation', activeConversationId);\n      dispatch(getConversation(activeConversationId)); // dispatch(markConversationAsRead(activeConversationId));\n    }\n  }, [dispatch, activeConversationId]);\n  useEffect(() => {\n    socket.on('connect', () => {\n      console.log('Successfully connected');\n\n      if (activeConversationId) {\n        if (currentConversationId && currentConversationId !== activeConversationId) {\n          console.log('leaveChat', currentConversationId);\n          socket.emit('leaveChat', JSON.stringify({\n            chatId: currentConversationId\n          }));\n          console.log('joinChat', activeConversationId);\n          const params = {\n            chatId: activeConversationId\n          };\n          socket.emit('joinChat', JSON.stringify(params));\n          setCurrentCoversationId(activeConversationId);\n        }\n\n        console.log(conversation);\n\n        if (conversation.lastMessage && conversation.lastMessage.users_see_message.indexOf(user._id) === -1) {\n          socket.emit('makeLastMessageAsSeen', JSON.stringify({\n            chatId: activeConversationId,\n            userId: user._id\n          }));\n        }\n      }\n    });\n    socket.on('connect_failed', () => {\n      console.log('Connection Failed');\n    });\n    socket.on('disconnect', () => {\n      console.log('Disconnected');\n    });\n    socket.on('msgReceive', handleReceiveMessage);\n    socket.on('onDeleted', handleDeleteMessage);\n    socket.on('onTyping', onTyping);\n  }, [socket, activeConversationId]);\n\n  const handleAddRecipient = recipient => {\n    dispatch(addRecipients(recipient));\n  };\n\n  const handleSendMessage = async value => {\n    try {\n      dispatch(onSendMessage(value));\n      const message = {\n        sender_id: value.senderId,\n        sender_name: value.senderName,\n        messageId: value.messageId,\n        chat_id: value.conversationId,\n        message: value.message,\n        receiver_id: value.receiverId,\n        message_type: value.messageType,\n        imgs: value.imgs\n      };\n      console.log('socket new message', message);\n      socket.emit('new_message', JSON.stringify(message));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleReceiveMessage = async value => {\n    console.log(activeConversationId, value);\n    dispatch(getConversation(activeConversationId));\n  };\n\n  const handleDeleteMessage = async value => {\n    console.log(value);\n    dispatch(getConversation(activeConversationId));\n  };\n\n  const onTyping = async value => {\n    console.log(value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      flexGrow: 1,\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    children: [mode === 'DETAIL' ? /*#__PURE__*/_jsxDEV(ChatHeaderDetail, {\n      participants: displayParticipants\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(ChatHeaderCompose, {\n      recipients: recipients,\n      contacts: Object.values(contacts.byId),\n      onAddRecipient: handleAddRecipient\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        flexGrow: 1,\n        display: 'flex',\n        overflow: 'hidden'\n      },\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          flexGrow: 1,\n          flexDirection: 'column'\n        },\n        children: [/*#__PURE__*/_jsxDEV(ChatMessageList, {\n          conversation: conversation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChatMessageInput, {\n          conversationId: activeConversationId,\n          opponentId: opponentId,\n          onSend: handleSendMessage,\n          disabled: pathname === PATH_DASHBOARD.chat.private\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["E:/dev/admin_panel/LocalsAdminPanel/src/components/_dashboard/privatechat/ChatWindow.js"],"names":["useEffect","useState","useNavigate","useParams","useLocation","Box","Divider","useDispatch","useSelector","addRecipients","onSendMessage","getConversation","getParticipants","markConversationAsRead","resetActiveConversation","PATH_DASHBOARD","ChatRoom","ChatMessageList","ChatHeaderDetail","ChatMessageInput","ChatHeaderCompose","useAuth","conversationSelector","state","conversations","activeConversationId","privatechat","conversation","byId","id","messages","lastMessage","users","ChatWindow","socket","dispatch","navigate","user","pathname","opponentId","contacts","recipients","participants","currentConversationId","setCurrentCoversationId","mode","displayParticipants","filter","item","_id","console","log","on","emit","JSON","stringify","chatId","params","users_see_message","indexOf","userId","handleReceiveMessage","handleDeleteMessage","onTyping","handleAddRecipient","recipient","handleSendMessage","value","message","sender_id","senderId","sender_name","senderName","messageId","chat_id","conversationId","receiver_id","receiverId","message_type","messageType","imgs","error","flexGrow","display","flexDirection","Object","values","overflow","chat","private"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\n// material\nimport { Box, Divider } from '@material-ui/core';\n// redux\nimport { useDispatch, useSelector } from '../../../redux/store';\nimport {\n  addRecipients,\n  onSendMessage,\n  getConversation,\n  getParticipants,\n  markConversationAsRead,\n  resetActiveConversation\n} from '../../../redux/slices/privatechat';\n// routes\nimport { PATH_DASHBOARD } from '../../../routes/paths';\n//\nimport ChatRoom from './ChatRoom';\nimport ChatMessageList from './ChatMessageList';\nimport ChatHeaderDetail from './ChatHeaderDetail';\nimport ChatMessageInput from './ChatMessageInput';\nimport ChatHeaderCompose from './ChatHeaderCompose';\n// hooks\nimport useAuth from '../../../hooks/useAuth';\n\n// ----------------------------------------------------------------------\n\nconst conversationSelector = (state) => {\n  const { conversations, activeConversationId } = state.privatechat;\n  const conversation = conversations.byId[activeConversationId];\n  if (conversation) {\n    return conversation;\n  }\n  return {\n    id: null,\n    messages: [],\n    lastMessage: null,\n    users: []\n  };\n};\n\nexport default function ChatWindow({ socket }) {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { user } = useAuth();\n  const { pathname } = useLocation();\n  const { opponentId } = useParams();\n  const { contacts, recipients, participants, activeConversationId } = useSelector((state) => state.privatechat);\n  const conversation = useSelector((state) => conversationSelector(state));\n  const [currentConversationId, setCurrentCoversationId] = useState(null);\n\n  const mode = opponentId ? 'DETAIL' : 'COMPOSE';\n\n  const displayParticipants = participants.filter((item) => item._id !== '8864c717-587d-472a-929a-8e5f298024da-0');\n\n  useEffect(() => {\n    if (activeConversationId) {\n      console.log('get conversation', activeConversationId);\n      dispatch(getConversation(activeConversationId));\n      // dispatch(markConversationAsRead(activeConversationId));\n    }\n  }, [dispatch, activeConversationId]);\n\n  useEffect(() => {\n    socket.on('connect', () => {\n      console.log('Successfully connected');\n      if (activeConversationId) {\n        if (currentConversationId && currentConversationId !== activeConversationId) {\n          console.log('leaveChat', currentConversationId);\n          socket.emit(\n            'leaveChat',\n            JSON.stringify({\n              chatId: currentConversationId\n            })\n          );\n          console.log('joinChat', activeConversationId);\n          const params = { chatId: activeConversationId };\n          socket.emit('joinChat', JSON.stringify(params));\n          setCurrentCoversationId(activeConversationId);\n        }\n        console.log(conversation);\n        if (conversation.lastMessage && conversation.lastMessage.users_see_message.indexOf(user._id) === -1) {\n          socket.emit('makeLastMessageAsSeen', JSON.stringify({ chatId: activeConversationId, userId: user._id }));\n        }\n      }\n    });\n    socket.on('connect_failed', () => {\n      console.log('Connection Failed');\n    });\n    socket.on('disconnect', () => {\n      console.log('Disconnected');\n    });\n    socket.on('msgReceive', handleReceiveMessage);\n    socket.on('onDeleted', handleDeleteMessage);\n    socket.on('onTyping', onTyping);\n  }, [socket, activeConversationId]);\n\n  const handleAddRecipient = (recipient) => {\n    dispatch(addRecipients(recipient));\n  };\n\n  const handleSendMessage = async (value) => {\n    try {\n      dispatch(onSendMessage(value));\n      const message = {\n        sender_id: value.senderId,\n        sender_name: value.senderName,\n        messageId: value.messageId,\n        chat_id: value.conversationId,\n        message: value.message,\n        receiver_id: value.receiverId,\n        message_type: value.messageType,\n        imgs: value.imgs\n      };\n      console.log('socket new message', message);\n      socket.emit('new_message', JSON.stringify(message));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleReceiveMessage = async (value) => {\n    console.log(activeConversationId, value);\n    dispatch(getConversation(activeConversationId));\n  };\n\n  const handleDeleteMessage = async (value) => {\n    console.log(value);\n    dispatch(getConversation(activeConversationId));\n  };\n\n  const onTyping = async (value) => {\n    console.log(value);\n  };\n\n  return (\n    <Box sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column' }}>\n      {mode === 'DETAIL' ? (\n        <ChatHeaderDetail participants={displayParticipants} />\n      ) : (\n        <ChatHeaderCompose\n          recipients={recipients}\n          contacts={Object.values(contacts.byId)}\n          onAddRecipient={handleAddRecipient}\n        />\n      )}\n\n      <Divider />\n\n      <Box sx={{ flexGrow: 1, display: 'flex', overflow: 'hidden' }}>\n        <Box sx={{ display: 'flex', flexGrow: 1, flexDirection: 'column' }}>\n          <ChatMessageList conversation={conversation} />\n\n          <Divider />\n\n          <ChatMessageInput\n            conversationId={activeConversationId}\n            opponentId={opponentId}\n            onSend={handleSendMessage}\n            disabled={pathname === PATH_DASHBOARD.chat.private}\n          />\n        </Box>\n\n        {/* {mode === 'DETAIL' && <ChatRoom conversation={conversation} participants={displayParticipants} />} */}\n      </Box>\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}