{"ast":null,"code":"var _jsxFileName = \"E:\\\\dev\\\\admin_panel\\\\LocalsAdminPanel\\\\src\\\\pages\\\\dashboard\\\\PrivateChat.js\";\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom'; // material\n\nimport { Card, Container } from '@material-ui/core'; // redux\n\nimport { useDispatch, useSelector } from '../../redux/store';\nimport { getUserList } from '../../redux/slices/user';\nimport { getConversations, getContacts, onConnectChat } from '../../redux/slices/privatechat';\nimport { getSettingsList } from '../../redux/slices/settings'; // routes\n\nimport { PATH_DASHBOARD } from '../../routes/paths'; // hooks\n\nimport useSettings from '../../hooks/useSettings';\nimport useAuth from '../../hooks/useAuth'; // components\n\nimport Page from '../../components/Page';\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\nimport { ChatSidebar, ChatWindow, ChatAdminMessageForm } from '../../components/_dashboard/privatechat'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PrivateChat() {\n  const {\n    themeStretch\n  } = useSettings();\n  const dispatch = useDispatch();\n  const {\n    user\n  } = useAuth();\n  const {\n    opponentId\n  } = useParams();\n  const {\n    settingsList\n  } = useSelector(state => state.setting);\n  const chatSettings = settingsList.find(settingRow => settingRow.type === 'chat');\n\n  if (opponentId) {\n    try {\n      const lastMessage = (chatSettings === null || chatSettings === void 0 ? void 0 : chatSettings.settings.admin_message) || 'Please leave a message, I will reply to you as soon as possible. You may talk about anything: advertising, complaining, suggestions, advice, cooperation, etc.';\n      dispatch(onConnectChat(user._id, opponentId, lastMessage));\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  useEffect(() => {\n    dispatch(getUserList());\n    dispatch(getConversations());\n    dispatch(getContacts());\n    dispatch(getSettingsList());\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(Page, {\n    title: \"Chat | Locals\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: themeStretch ? false : 'xl',\n      children: [/*#__PURE__*/_jsxDEV(HeaderBreadcrumbs, {\n        heading: \"Private Chat\",\n        links: [{\n          name: 'Dashboard',\n          href: PATH_DASHBOARD.root\n        }, {\n          name: 'Private Chat'\n        }]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatAdminMessageForm, {\n        chatSettings: chatSettings\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          height: '72vh',\n          display: 'flex'\n        },\n        children: [/*#__PURE__*/_jsxDEV(ChatSidebar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChatWindow, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["E:/dev/admin_panel/LocalsAdminPanel/src/pages/dashboard/PrivateChat.js"],"names":["useEffect","useParams","Card","Container","useDispatch","useSelector","getUserList","getConversations","getContacts","onConnectChat","getSettingsList","PATH_DASHBOARD","useSettings","useAuth","Page","HeaderBreadcrumbs","ChatSidebar","ChatWindow","ChatAdminMessageForm","PrivateChat","themeStretch","dispatch","user","opponentId","settingsList","state","setting","chatSettings","find","settingRow","type","lastMessage","settings","admin_message","_id","error","console","name","href","root","height","display"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n// material\nimport { Card, Container } from '@material-ui/core';\n// redux\nimport { useDispatch, useSelector } from '../../redux/store';\nimport { getUserList } from '../../redux/slices/user';\nimport { getConversations, getContacts, onConnectChat } from '../../redux/slices/privatechat';\nimport { getSettingsList } from '../../redux/slices/settings';\n// routes\nimport { PATH_DASHBOARD } from '../../routes/paths';\n// hooks\nimport useSettings from '../../hooks/useSettings';\nimport useAuth from '../../hooks/useAuth';\n// components\nimport Page from '../../components/Page';\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\nimport { ChatSidebar, ChatWindow, ChatAdminMessageForm } from '../../components/_dashboard/privatechat';\n\n// ----------------------------------------------------------------------\n\nexport default function PrivateChat() {\n  const { themeStretch } = useSettings();\n  const dispatch = useDispatch();\n  const { user } = useAuth();\n  const { opponentId } = useParams();\n  const { settingsList } = useSelector((state) => state.setting);\n  const chatSettings = settingsList.find((settingRow) => settingRow.type === 'chat');\n\n  if (opponentId) {\n    try {\n      const lastMessage =\n        chatSettings?.settings.admin_message ||\n        'Please leave a message, I will reply to you as soon as possible. You may talk about anything: advertising, complaining, suggestions, advice, cooperation, etc.';\n      dispatch(onConnectChat(user._id, opponentId, lastMessage));\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  useEffect(() => {\n    dispatch(getUserList());\n    dispatch(getConversations());\n    dispatch(getContacts());\n    dispatch(getSettingsList());\n  }, [dispatch]);\n\n  return (\n    <Page title=\"Chat | Locals\">\n      <Container maxWidth={themeStretch ? false : 'xl'}>\n        <HeaderBreadcrumbs\n          heading=\"Private Chat\"\n          links={[{ name: 'Dashboard', href: PATH_DASHBOARD.root }, { name: 'Private Chat' }]}\n        />\n        <ChatAdminMessageForm chatSettings={chatSettings} />\n        <Card sx={{ height: '72vh', display: 'flex' }}>\n          <ChatSidebar />\n          <ChatWindow />\n        </Card>\n      </Container>\n    </Page>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}