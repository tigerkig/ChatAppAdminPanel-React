{"ast":null,"code":"var _jsxFileName = \"E:\\\\dev\\\\admin_panel\\\\LocalsAdminPanel\\\\src\\\\components\\\\_dashboard\\\\user\\\\account\\\\AccountChangePassword.js\";\nimport * as Yup from 'yup';\nimport { useSnackbar } from 'notistack5';\nimport { useFormik, Form, FormikProvider } from 'formik'; // material\n\nimport { Stack, Card, TextField } from '@material-ui/core';\nimport { LoadingButton } from '@material-ui/lab'; // utils\n\nimport fakeRequest from '../../../../utils/fakeRequest';\nimport axios from '../../../../utils/axios';\nimport useAuth from '../../../../hooks/useAuth'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AccountChangePassword() {\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const {\n    user\n  } = useAuth();\n  const ChangePassWordSchema = Yup.object().shape({\n    oldPassword: Yup.string().required('Old Password is required'),\n    newPassword: Yup.string().min(6, 'Password must be at least 6 characters').required('New Password is required'),\n    confirmNewPassword: Yup.string().oneOf([Yup.ref('newPassword'), null], 'Passwords must match')\n  });\n  const formik = useFormik({\n    initialValues: {\n      oldPassword: '',\n      newPassword: '',\n      confirmNewPassword: ''\n    },\n    validationSchema: ChangePassWordSchema,\n    onSubmit: async (values, {\n      setSubmitting\n    }) => {\n      if (values.newPassword !== values.confirmNewPassword) {\n        enqueueSnackbar('Please confirm new password correctly', {\n          variant: 'warning'\n        });\n        return;\n      }\n\n      await fakeRequest(500);\n      const params = {\n        old_password: values.oldPassword,\n        new_password: values.newPassword\n      };\n      await axios.post(`user/change_password/${user._id}`, params).then(() => {\n        setSubmitting(false);\n        enqueueSnackbar('Save success', {\n          variant: 'success'\n        });\n      }).catch(err => {\n        console.log(err); // enqueueSnackbar(result.data, { variant: 'error' });\n      }); // alert(JSON.stringify(values, null, 2));\n    }\n  });\n  const {\n    errors,\n    touched,\n    isSubmitting,\n    handleSubmit,\n    getFieldProps\n  } = formik;\n  return /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      p: 3\n    },\n    children: /*#__PURE__*/_jsxDEV(FormikProvider, {\n      value: formik,\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        autoComplete: \"off\",\n        noValidate: true,\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(Stack, {\n          spacing: 3,\n          alignItems: \"flex-end\",\n          children: [/*#__PURE__*/_jsxDEV(TextField, { ...getFieldProps('oldPassword'),\n            fullWidth: true,\n            autoComplete: \"on\",\n            type: \"password\",\n            label: \"Old Password\",\n            error: Boolean(touched.oldPassword && errors.oldPassword),\n            helperText: touched.oldPassword && errors.oldPassword\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, { ...getFieldProps('newPassword'),\n            fullWidth: true,\n            autoComplete: \"on\",\n            type: \"password\",\n            label: \"New Password\",\n            error: Boolean(touched.newPassword && errors.newPassword),\n            helperText: touched.newPassword && errors.newPassword || 'Password must be minimum 6+'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, { ...getFieldProps('confirmNewPassword'),\n            fullWidth: true,\n            autoComplete: \"on\",\n            type: \"password\",\n            label: \"Confirm New Password\",\n            error: Boolean(touched.confirmNewPassword && errors.confirmNewPassword),\n            helperText: touched.confirmNewPassword && errors.confirmNewPassword\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n            type: \"submit\",\n            variant: \"contained\",\n            loading: isSubmitting,\n            children: \"Save Changes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["E:/dev/admin_panel/LocalsAdminPanel/src/components/_dashboard/user/account/AccountChangePassword.js"],"names":["Yup","useSnackbar","useFormik","Form","FormikProvider","Stack","Card","TextField","LoadingButton","fakeRequest","axios","useAuth","AccountChangePassword","enqueueSnackbar","user","ChangePassWordSchema","object","shape","oldPassword","string","required","newPassword","min","confirmNewPassword","oneOf","ref","formik","initialValues","validationSchema","onSubmit","values","setSubmitting","variant","params","old_password","new_password","post","_id","then","catch","err","console","log","errors","touched","isSubmitting","handleSubmit","getFieldProps","p","Boolean"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\nimport { useSnackbar } from 'notistack5';\nimport { useFormik, Form, FormikProvider } from 'formik';\n// material\nimport { Stack, Card, TextField } from '@material-ui/core';\nimport { LoadingButton } from '@material-ui/lab';\n// utils\nimport fakeRequest from '../../../../utils/fakeRequest';\nimport axios from '../../../../utils/axios';\nimport useAuth from '../../../../hooks/useAuth';\n\n// ----------------------------------------------------------------------\n\nexport default function AccountChangePassword() {\n  const { enqueueSnackbar } = useSnackbar();\n  const { user } = useAuth();\n\n  const ChangePassWordSchema = Yup.object().shape({\n    oldPassword: Yup.string().required('Old Password is required'),\n    newPassword: Yup.string().min(6, 'Password must be at least 6 characters').required('New Password is required'),\n    confirmNewPassword: Yup.string().oneOf([Yup.ref('newPassword'), null], 'Passwords must match')\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      oldPassword: '',\n      newPassword: '',\n      confirmNewPassword: ''\n    },\n    validationSchema: ChangePassWordSchema,\n    onSubmit: async (values, { setSubmitting }) => {\n      if (values.newPassword !== values.confirmNewPassword) {\n        enqueueSnackbar('Please confirm new password correctly', { variant: 'warning' });\n        return;\n      }\n      await fakeRequest(500);\n      const params = {\n        old_password: values.oldPassword,\n        new_password: values.newPassword\n      };\n      await axios.post(`user/change_password/${user._id}`, params)\n        .then(() => {\n          setSubmitting(false);\n          enqueueSnackbar('Save success', { variant: 'success' });\n        }).catch((err) => {\n          console.log(err);\n          // enqueueSnackbar(result.data, { variant: 'error' });\n        });\n      // alert(JSON.stringify(values, null, 2));\n    }\n  });\n\n  const { errors, touched, isSubmitting, handleSubmit, getFieldProps } = formik;\n\n  return (\n    <Card sx={{ p: 3 }}>\n      <FormikProvider value={formik}>\n        <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n          <Stack spacing={3} alignItems=\"flex-end\">\n            <TextField\n              {...getFieldProps('oldPassword')}\n              fullWidth\n              autoComplete=\"on\"\n              type=\"password\"\n              label=\"Old Password\"\n              error={Boolean(touched.oldPassword && errors.oldPassword)}\n              helperText={touched.oldPassword && errors.oldPassword}\n            />\n\n            <TextField\n              {...getFieldProps('newPassword')}\n              fullWidth\n              autoComplete=\"on\"\n              type=\"password\"\n              label=\"New Password\"\n              error={Boolean(touched.newPassword && errors.newPassword)}\n              helperText={(touched.newPassword && errors.newPassword) || 'Password must be minimum 6+'}\n            />\n\n            <TextField\n              {...getFieldProps('confirmNewPassword')}\n              fullWidth\n              autoComplete=\"on\"\n              type=\"password\"\n              label=\"Confirm New Password\"\n              error={Boolean(touched.confirmNewPassword && errors.confirmNewPassword)}\n              helperText={touched.confirmNewPassword && errors.confirmNewPassword}\n            />\n\n            <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n              Save Changes\n            </LoadingButton>\n          </Stack>\n        </Form>\n      </FormikProvider>\n    </Card>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}