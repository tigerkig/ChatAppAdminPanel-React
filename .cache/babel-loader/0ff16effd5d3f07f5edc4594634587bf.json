{"ast":null,"code":"var _jsxFileName = \"E:\\\\dev\\\\admin_panel\\\\LocalsAdminPanel\\\\src\\\\components\\\\_dashboard\\\\user\\\\UserNewForm.js\";\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { useCallback, useState } from 'react';\nimport { useSnackbar } from 'notistack5';\nimport { useNavigate } from 'react-router-dom';\nimport { Form, FormikProvider, useFormik } from 'formik'; // material\n\nimport { LoadingButton } from '@material-ui/lab';\nimport { Box, Card, Grid, Stack, Switch, TextField, Typography, FormHelperText, FormControlLabel } from '@material-ui/core'; // utils\n\nimport axios from '../../../utils/axios';\nimport { fData } from '../../../utils/formatNumber';\nimport fakeRequest from '../../../utils/fakeRequest'; // routes\n\nimport { PATH_DASHBOARD } from '../../../routes/paths'; //\n\nimport Label from '../../Label';\nimport { UploadAvatar } from '../../upload';\nimport countries from './countries';\nimport useAuth from '../../../hooks/useAuth';\nimport ConfirmDialog from '../../ConfirmDialog'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nUserNewForm.propTypes = {\n  isEdit: PropTypes.bool,\n  currentUser: PropTypes.object\n};\nexport default function UserNewForm({\n  isEdit,\n  currentUser\n}) {\n  const navigate = useNavigate();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const {\n    user\n  } = useAuth();\n  const [openDeleteConfirm, setOpenDeleteConfirm] = useState(false);\n\n  const handleCloseDeleteConfirm = () => {\n    setOpenDeleteConfirm(false);\n  };\n\n  const onDeleteUser = async () => {\n    if (currentUser._id !== user._id) {\n      setOpenDeleteConfirm(true);\n    } else {\n      enqueueSnackbar(\"You can't delete this user you logged in\", {\n        variant: 'warning'\n      });\n    }\n  };\n\n  const handleDeleteUser = async () => {\n    if (currentUser._id !== user._id) {\n      await axios.delete(`user/delete/${currentUser._id}`);\n      navigate(PATH_DASHBOARD.user.list);\n    }\n  };\n\n  let NewUserSchema = null;\n\n  if (!isEdit) {\n    NewUserSchema = Yup.object().shape({\n      // name: Yup.string().required('Name is required'),\n      email: Yup.string().required('Email is required').email(),\n      password: Yup.string().required('Password is required'),\n      gender: Yup.string().required('Gender is required'),\n      role: Yup.string().required('Role is required'),\n      coverage: Yup.string().required('Coverage is required') // phoneNumber: Yup.string().required('Phone number is required'),\n      // address: Yup.string().required('Address is required'),\n      // country: Yup.string().required('country is required'),\n      // state: Yup.string().required('State is required'),\n      // city: Yup.string().required('City is required')\n\n    });\n  } else {\n    NewUserSchema = Yup.object().shape({\n      // name: Yup.string().required('Name is required'),\n      email: Yup.string().required('Email is required').email(),\n      password: Yup.string().required('Password is required'),\n      gender: Yup.string().required('Gender is required'),\n      role: Yup.string().required('Role is required'),\n      coverage: Yup.string().required('Coverage is required') // phoneNumber: Yup.string().required('Phone number is required'),\n      // address: Yup.string().required('Address is required')\n\n    });\n  }\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      name: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.name) || '',\n      email: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.email) || '',\n      password: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.originPassword) || '',\n      gender: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.gender) || '',\n      role: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.role) || '',\n      coverage: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.coverage) || 150,\n      fixedLocation: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.fixedLocation) || '',\n      phoneNumber: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.phoneNumber) || '',\n      address: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.address) || '',\n      country: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.country) || '',\n      state: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.state) || '',\n      city: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.city) || '',\n      zipCode: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.zipCode) || '',\n      avatarUrl: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.avatarUrl) || null,\n      isVerified: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.isVerified) || true,\n      status: currentUser === null || currentUser === void 0 ? void 0 : currentUser.status,\n      username: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.username) || '',\n      note: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.note) || ''\n    },\n    validationSchema: NewUserSchema,\n    onSubmit: async (values, {\n      setSubmitting,\n      resetForm,\n      setErrors\n    }) => {\n      try {\n        await fakeRequest(500);\n\n        if (!isEdit) {\n          await axios.post('/user/create', values);\n        } else {\n          await axios.post(`/user/update?user_id=${currentUser._id}`, values);\n        }\n\n        resetForm();\n        setSubmitting(false);\n        enqueueSnackbar(!isEdit ? 'Create success' : 'Update success', {\n          variant: 'success'\n        });\n        navigate(PATH_DASHBOARD.user.list);\n      } catch (error) {\n        console.error(error);\n        setSubmitting(false);\n        setErrors(error);\n      }\n    }\n  });\n\n  const handleAbort = async () => {\n    navigate(PATH_DASHBOARD.user.list);\n  };\n\n  const {\n    errors,\n    values,\n    touched,\n    handleSubmit,\n    isSubmitting,\n    setFieldValue,\n    getFieldProps\n  } = formik;\n  const handleDrop = useCallback(acceptedFiles => {\n    const file = acceptedFiles[0];\n\n    if (file) {\n      setFieldValue('avatarUrl', { ...file,\n        preview: URL.createObjectURL(file)\n      });\n    }\n  }, [setFieldValue]);\n  return /*#__PURE__*/_jsxDEV(FormikProvider, {\n    value: formik,\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      noValidate: true,\n      autoComplete: \"off\",\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 4,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            sx: {\n              py: 10,\n              px: 3\n            },\n            children: [isEdit && /*#__PURE__*/_jsxDEV(Label, {\n              color: values.status !== 'active' ? 'error' : 'success',\n              sx: {\n                textTransform: 'uppercase',\n                position: 'absolute',\n                top: 24,\n                right: 24\n              },\n              children: values.status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 17\n            }, this), isEdit && /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                mb: 5\n              },\n              children: [/*#__PURE__*/_jsxDEV(UploadAvatar, {\n                accept: \"image/*\",\n                file: values.avatarUrl,\n                maxSize: 3145728,\n                onDrop: handleDrop,\n                error: Boolean(touched.avatarUrl && errors.avatarUrl),\n                caption: /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"caption\",\n                  sx: {\n                    mt: 2,\n                    mx: 'auto',\n                    display: 'block',\n                    textAlign: 'center',\n                    color: 'text.secondary'\n                  },\n                  children: [\"Allowed *.jpeg, *.jpg, *.png, *.gif\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 194,\n                    columnNumber: 25\n                  }, this), \" max size of \", fData(3145728)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 183,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n                error: true,\n                sx: {\n                  px: 2,\n                  textAlign: 'center'\n                },\n                children: touched.avatarUrl && errors.avatarUrl\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 17\n            }, this), isEdit && /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              labelPlacement: \"start\",\n              control: /*#__PURE__*/_jsxDEV(Switch, {\n                onChange: event => setFieldValue('status', event.target.checked ? 'banned' : 'active'),\n                checked: values.status !== 'active'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 21\n              }, this),\n              label: /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"subtitle2\",\n                  sx: {\n                    mb: 0.5\n                  },\n                  children: \"Banned\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 215,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  sx: {\n                    color: 'text.secondary'\n                  },\n                  children: \"Apply disable account\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 218,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true),\n              sx: {\n                mx: 0,\n                mb: 3,\n                width: 1,\n                justifyContent: 'space-between'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              labelPlacement: \"start\",\n              control: /*#__PURE__*/_jsxDEV(Switch, { ...getFieldProps('isVerified'),\n                checked: values.isVerified\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 26\n              }, this),\n              label: /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"subtitle2\",\n                  sx: {\n                    mb: 0.5\n                  },\n                  children: \"Email Verified\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 232,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  sx: {\n                    color: 'text.secondary'\n                  },\n                  children: \"Disabling this will automatically send the user a verification email\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 235,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true),\n              sx: {\n                mx: 0,\n                width: 1,\n                justifyContent: 'space-between'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 8,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            sx: {\n              p: 3\n            },\n            children: /*#__PURE__*/_jsxDEV(Stack, {\n              spacing: 3,\n              children: [/*#__PURE__*/_jsxDEV(Stack, {\n                direction: {\n                  xs: 'column',\n                  sm: 'row'\n                },\n                spacing: {\n                  xs: 3,\n                  sm: 2\n                },\n                children: [/*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Email Address\",\n                  ...getFieldProps('email'),\n                  error: Boolean(touched.email && errors.email),\n                  helperText: touched.email && errors.email\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 249,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"NickName\",\n                  ...getFieldProps('name'),\n                  error: Boolean(touched.name && errors.name),\n                  helperText: touched.name && errors.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 256,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Stack, {\n                direction: {\n                  xs: 'column',\n                  sm: 'row'\n                },\n                spacing: {\n                  xs: 3,\n                  sm: 2\n                },\n                children: [/*#__PURE__*/_jsxDEV(TextField // type=\"password\"\n                , {\n                  fullWidth: true,\n                  label: \"Password\",\n                  ...getFieldProps('password'),\n                  error: Boolean(touched.password && errors.password),\n                  helperText: touched.password && errors.password\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 266,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                  select: true,\n                  fullWidth: true,\n                  label: \"Gender\",\n                  ...getFieldProps('gender'),\n                  SelectProps: {\n                    native: true\n                  },\n                  error: Boolean(touched.gender && errors.gender),\n                  helperText: touched.gender && errors.gender,\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 283,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"male\",\n                    children: \"Male\"\n                  }, \"male\", false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 284,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"female\",\n                    children: \"Female\"\n                  }, \"female\", false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 287,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"business\",\n                    children: \"Business\"\n                  }, \"business\", false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 290,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 274,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Stack, {\n                direction: {\n                  xs: 'column',\n                  sm: 'row'\n                },\n                spacing: {\n                  xs: 3,\n                  sm: 2\n                },\n                children: [/*#__PURE__*/_jsxDEV(TextField, {\n                  select: true,\n                  fullWidth: true,\n                  label: \"Role\",\n                  ...getFieldProps('role'),\n                  SelectProps: {\n                    native: true\n                  },\n                  error: Boolean(touched.role && errors.role),\n                  helperText: touched.role && errors.role,\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 306,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"user\",\n                    children: \"user\"\n                  }, \"user\", false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 307,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"admin\",\n                    children: \"admin\"\n                  }, \"admin\", false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 310,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 297,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  inputProps: {\n                    inputMode: 'numeric',\n                    pattern: '[0-9]*'\n                  },\n                  label: \"Coverage\",\n                  ...getFieldProps('coverage'),\n                  error: Boolean(touched.coverage && errors.coverage),\n                  helperText: touched.coverage && errors.coverage\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 314,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 296,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Stack, {\n                direction: {\n                  xs: 'column',\n                  sm: 'row'\n                },\n                spacing: {\n                  xs: 3,\n                  sm: 2\n                },\n                children: [/*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Location\",\n                  ...getFieldProps('country'),\n                  error: Boolean(touched.country && errors.country),\n                  helperText: touched.country && errors.country\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 342,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Latitude and longitude\",\n                  ...getFieldProps('location'),\n                  error: Boolean(touched.location && errors.location),\n                  helperText: touched.location && errors.location\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 349,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 341,\n                columnNumber: 17\n              }, this), isEdit && /*#__PURE__*/_jsxDEV(Stack, {\n                direction: {\n                  xs: 'column',\n                  sm: 'row'\n                },\n                spacing: {\n                  xs: 3,\n                  sm: 2\n                },\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Fixed Location\",\n                  ...getFieldProps('fixedLocation'),\n                  error: Boolean(touched.fixedLocation && errors.fixedLocation),\n                  helperText: touched.fixedLocation && errors.fixedLocation\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 360,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Stack, {\n                direction: {\n                  xs: 'column',\n                  sm: 'row'\n                },\n                spacing: {\n                  xs: 3,\n                  sm: 2\n                },\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Note\",\n                  multiline: true,\n                  minRows: 4,\n                  maxRows: 4,\n                  ...getFieldProps('note'),\n                  error: Boolean(touched.note && errors.note),\n                  helperText: touched.note && errors.note\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 419,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 418,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  mt: 3,\n                  display: 'flex',\n                  justifyContent: 'flex-end'\n                },\n                children: /*#__PURE__*/_jsxDEV(Stack, {\n                  direction: {\n                    xs: 'column',\n                    sm: 'row'\n                  },\n                  spacing: {\n                    xs: 3,\n                    sm: 2\n                  },\n                  children: [isEdit && /*#__PURE__*/_jsxDEV(LoadingButton, {\n                    type: \"button\",\n                    color: \"error\",\n                    variant: \"contained\",\n                    onClick: onDeleteUser,\n                    children: \"Delete This User\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 434,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n                    type: \"submit\",\n                    variant: \"contained\",\n                    loading: isSubmitting,\n                    children: !isEdit ? 'Create User' : 'Save Changes'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 438,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n                    type: \"button\",\n                    color: \"warning\",\n                    variant: \"contained\",\n                    onClick: handleAbort,\n                    children: \"Abort\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 441,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 432,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 431,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), openDeleteConfirm && /*#__PURE__*/_jsxDEV(ConfirmDialog, {\n      message: \"Are you sure you are going to delete this user?\",\n      onConfirm: handleDeleteUser,\n      onClose: handleCloseDeleteConfirm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["E:/dev/admin_panel/LocalsAdminPanel/src/components/_dashboard/user/UserNewForm.js"],"names":["Yup","PropTypes","useCallback","useState","useSnackbar","useNavigate","Form","FormikProvider","useFormik","LoadingButton","Box","Card","Grid","Stack","Switch","TextField","Typography","FormHelperText","FormControlLabel","axios","fData","fakeRequest","PATH_DASHBOARD","Label","UploadAvatar","countries","useAuth","ConfirmDialog","UserNewForm","propTypes","isEdit","bool","currentUser","object","navigate","enqueueSnackbar","user","openDeleteConfirm","setOpenDeleteConfirm","handleCloseDeleteConfirm","onDeleteUser","_id","variant","handleDeleteUser","delete","list","NewUserSchema","shape","email","string","required","password","gender","role","coverage","formik","enableReinitialize","initialValues","name","originPassword","fixedLocation","phoneNumber","address","country","state","city","zipCode","avatarUrl","isVerified","status","username","note","validationSchema","onSubmit","values","setSubmitting","resetForm","setErrors","post","error","console","handleAbort","errors","touched","handleSubmit","isSubmitting","setFieldValue","getFieldProps","handleDrop","acceptedFiles","file","preview","URL","createObjectURL","py","px","textTransform","position","top","right","mb","Boolean","mt","mx","display","textAlign","color","event","target","checked","width","justifyContent","p","xs","sm","native","inputMode","pattern","location"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { useCallback, useState } from 'react';\nimport { useSnackbar } from 'notistack5';\nimport { useNavigate } from 'react-router-dom';\nimport { Form, FormikProvider, useFormik } from 'formik';\n// material\nimport { LoadingButton } from '@material-ui/lab';\nimport {\n  Box,\n  Card,\n  Grid,\n  Stack,\n  Switch,\n  TextField,\n  Typography,\n  FormHelperText,\n  FormControlLabel\n} from '@material-ui/core';\n// utils\nimport axios from '../../../utils/axios';\nimport { fData } from '../../../utils/formatNumber';\nimport fakeRequest from '../../../utils/fakeRequest';\n// routes\nimport { PATH_DASHBOARD } from '../../../routes/paths';\n//\nimport Label from '../../Label';\nimport { UploadAvatar } from '../../upload';\nimport countries from './countries';\nimport useAuth from '../../../hooks/useAuth';\nimport ConfirmDialog from '../../ConfirmDialog';\n\n// ----------------------------------------------------------------------\n\nUserNewForm.propTypes = {\n  isEdit: PropTypes.bool,\n  currentUser: PropTypes.object\n};\n\nexport default function UserNewForm({ isEdit, currentUser }) {\n  const navigate = useNavigate();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const { user } = useAuth();\n  const [openDeleteConfirm, setOpenDeleteConfirm] = useState(false);\n\n  const handleCloseDeleteConfirm = () => {\n    setOpenDeleteConfirm(false);\n  };\n\n  const onDeleteUser = async () => {\n    if (currentUser._id !== user._id) {\n      setOpenDeleteConfirm(true);\n    } else {\n      enqueueSnackbar(\"You can't delete this user you logged in\", { variant: 'warning' });\n    }\n  };\n\n  const handleDeleteUser = async () => {\n    if (currentUser._id !== user._id) {\n      await axios.delete(`user/delete/${currentUser._id}`);\n      navigate(PATH_DASHBOARD.user.list);\n    }\n  };\n\n  let NewUserSchema = null;\n\n  if (!isEdit) {\n    NewUserSchema = Yup.object().shape({\n      // name: Yup.string().required('Name is required'),\n      email: Yup.string().required('Email is required').email(),\n      password: Yup.string().required('Password is required'),\n      gender: Yup.string().required('Gender is required'),\n      role: Yup.string().required('Role is required'),\n      coverage: Yup.string().required('Coverage is required')\n      // phoneNumber: Yup.string().required('Phone number is required'),\n      // address: Yup.string().required('Address is required'),\n      // country: Yup.string().required('country is required'),\n      // state: Yup.string().required('State is required'),\n      // city: Yup.string().required('City is required')\n    });\n  } else {\n    NewUserSchema = Yup.object().shape({\n      // name: Yup.string().required('Name is required'),\n      email: Yup.string().required('Email is required').email(),\n      password: Yup.string().required('Password is required'),\n      gender: Yup.string().required('Gender is required'),\n      role: Yup.string().required('Role is required'),\n      coverage: Yup.string().required('Coverage is required')\n      // phoneNumber: Yup.string().required('Phone number is required'),\n      // address: Yup.string().required('Address is required')\n    });\n  }\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      name: currentUser?.name || '',\n      email: currentUser?.email || '',\n      password: currentUser?.originPassword || '',\n      gender: currentUser?.gender || '',\n      role: currentUser?.role || '',\n      coverage: currentUser?.coverage || 150,\n      fixedLocation: currentUser?.fixedLocation || '',\n      phoneNumber: currentUser?.phoneNumber || '',\n      address: currentUser?.address || '',\n      country: currentUser?.country || '',\n      state: currentUser?.state || '',\n      city: currentUser?.city || '',\n      zipCode: currentUser?.zipCode || '',\n      avatarUrl: currentUser?.avatarUrl || null,\n      isVerified: currentUser?.isVerified || true,\n      status: currentUser?.status,\n      username: currentUser?.username || '',\n      note: currentUser?.note || ''\n    },\n    validationSchema: NewUserSchema,\n    onSubmit: async (values, { setSubmitting, resetForm, setErrors }) => {\n      try {\n        await fakeRequest(500);\n\n        if (!isEdit) {\n          await axios.post('/user/create', values);\n        } else {\n          await axios.post(`/user/update?user_id=${currentUser._id}`, values);\n        }\n\n        resetForm();\n        setSubmitting(false);\n        enqueueSnackbar(!isEdit ? 'Create success' : 'Update success', { variant: 'success' });\n        navigate(PATH_DASHBOARD.user.list);\n      } catch (error) {\n        console.error(error);\n        setSubmitting(false);\n        setErrors(error);\n      }\n    }\n  });\n\n  const handleAbort = async () => {\n    navigate(PATH_DASHBOARD.user.list);\n  };\n\n  const { errors, values, touched, handleSubmit, isSubmitting, setFieldValue, getFieldProps } = formik;\n\n  const handleDrop = useCallback(\n    (acceptedFiles) => {\n      const file = acceptedFiles[0];\n      if (file) {\n        setFieldValue('avatarUrl', {\n          ...file,\n          preview: URL.createObjectURL(file)\n        });\n      }\n    },\n    [setFieldValue]\n  );\n\n  return (\n    <FormikProvider value={formik}>\n      <Form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={4}>\n            <Card sx={{ py: 10, px: 3 }}>\n              {isEdit && (\n                <Label\n                  color={values.status !== 'active' ? 'error' : 'success'}\n                  sx={{ textTransform: 'uppercase', position: 'absolute', top: 24, right: 24 }}\n                >\n                  {values.status}\n                </Label>\n              )}\n\n              {isEdit && (\n                <Box sx={{ mb: 5 }}>\n                  <UploadAvatar\n                    accept=\"image/*\"\n                    file={values.avatarUrl}\n                    maxSize={3145728}\n                    onDrop={handleDrop}\n                    error={Boolean(touched.avatarUrl && errors.avatarUrl)}\n                    caption={\n                      <Typography\n                        variant=\"caption\"\n                        sx={{\n                          mt: 2,\n                          mx: 'auto',\n                          display: 'block',\n                          textAlign: 'center',\n                          color: 'text.secondary'\n                        }}\n                      >\n                        Allowed *.jpeg, *.jpg, *.png, *.gif\n                        <br /> max size of {fData(3145728)}\n                      </Typography>\n                    }\n                  />\n                  <FormHelperText error sx={{ px: 2, textAlign: 'center' }}>\n                    {touched.avatarUrl && errors.avatarUrl}\n                  </FormHelperText>\n                </Box>\n              )}\n\n              {isEdit && (\n                <FormControlLabel\n                  labelPlacement=\"start\"\n                  control={\n                    <Switch\n                      onChange={(event) => setFieldValue('status', event.target.checked ? 'banned' : 'active')}\n                      checked={values.status !== 'active'}\n                    />\n                  }\n                  label={\n                    <>\n                      <Typography variant=\"subtitle2\" sx={{ mb: 0.5 }}>\n                        Banned\n                      </Typography>\n                      <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\n                        Apply disable account\n                      </Typography>\n                    </>\n                  }\n                  sx={{ mx: 0, mb: 3, width: 1, justifyContent: 'space-between' }}\n                />\n              )}\n\n              <FormControlLabel\n                labelPlacement=\"start\"\n                control={<Switch {...getFieldProps('isVerified')} checked={values.isVerified} />}\n                label={\n                  <>\n                    <Typography variant=\"subtitle2\" sx={{ mb: 0.5 }}>\n                      Email Verified\n                    </Typography>\n                    <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\n                      Disabling this will automatically send the user a verification email\n                    </Typography>\n                  </>\n                }\n                sx={{ mx: 0, width: 1, justifyContent: 'space-between' }}\n              />\n            </Card>\n          </Grid>\n\n          <Grid item xs={12} md={8}>\n            <Card sx={{ p: 3 }}>\n              <Stack spacing={3}>\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    fullWidth\n                    label=\"Email Address\"\n                    {...getFieldProps('email')}\n                    error={Boolean(touched.email && errors.email)}\n                    helperText={touched.email && errors.email}\n                  />\n                  <TextField\n                    fullWidth\n                    label=\"NickName\"\n                    {...getFieldProps('name')}\n                    error={Boolean(touched.name && errors.name)}\n                    helperText={touched.name && errors.name}\n                  />\n                </Stack>\n\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    // type=\"password\"\n                    fullWidth\n                    label=\"Password\"\n                    {...getFieldProps('password')}\n                    error={Boolean(touched.password && errors.password)}\n                    helperText={touched.password && errors.password}\n                  />\n                  <TextField\n                    select\n                    fullWidth\n                    label=\"Gender\"\n                    {...getFieldProps('gender')}\n                    SelectProps={{ native: true }}\n                    error={Boolean(touched.gender && errors.gender)}\n                    helperText={touched.gender && errors.gender}\n                  >\n                    <option value=\"\" />\n                    <option key=\"male\" value=\"male\">\n                      Male\n                    </option>\n                    <option key=\"female\" value=\"female\">\n                      Female\n                    </option>\n                    <option key=\"business\" value=\"business\">\n                      Business\n                    </option>\n                  </TextField>\n                </Stack>\n\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    select\n                    fullWidth\n                    label=\"Role\"\n                    {...getFieldProps('role')}\n                    SelectProps={{ native: true }}\n                    error={Boolean(touched.role && errors.role)}\n                    helperText={touched.role && errors.role}\n                  >\n                    <option value=\"\" />\n                    <option key=\"user\" value=\"user\">\n                      user\n                    </option>\n                    <option key=\"admin\" value=\"admin\">\n                      admin\n                    </option>\n                  </TextField>\n                  <TextField\n                    fullWidth\n                    inputProps={{ inputMode: 'numeric', pattern: '[0-9]*' }}\n                    label=\"Coverage\"\n                    {...getFieldProps('coverage')}\n                    error={Boolean(touched.coverage && errors.coverage)}\n                    helperText={touched.coverage && errors.coverage}\n                  />\n                </Stack>\n\n                {/* <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    fullWidth\n                    label=\"Phone Number\"\n                    {...getFieldProps('phoneNumber')}\n                    error={Boolean(touched.phoneNumber && errors.phoneNumber)}\n                    helperText={touched.phoneNumber && errors.phoneNumber}\n                  />\n                  <TextField\n                    fullWidth\n                    label=\"Address\"\n                    {...getFieldProps('address')}\n                    error={Boolean(touched.address && errors.address)}\n                    helperText={touched.address && errors.address}\n                  />\n                </Stack> */}\n\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    fullWidth\n                    label=\"Location\"\n                    {...getFieldProps('country')}\n                    error={Boolean(touched.country && errors.country)}\n                    helperText={touched.country && errors.country}\n                  />\n                  <TextField\n                    fullWidth\n                    label=\"Latitude and longitude\"\n                    {...getFieldProps('location')}\n                    error={Boolean(touched.location && errors.location)}\n                    helperText={touched.location && errors.location}\n                  />\n                </Stack>\n\n                {isEdit && (\n                  <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                    <TextField\n                      fullWidth\n                      label=\"Fixed Location\"\n                      {...getFieldProps('fixedLocation')}\n                      error={Boolean(touched.fixedLocation && errors.fixedLocation)}\n                      helperText={touched.fixedLocation && errors.fixedLocation}\n                    />\n                  </Stack>\n                )}\n\n                {/* <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    select\n                    fullWidth\n                    label=\"Country\"\n                    placeholder=\"Country\"\n                    {...getFieldProps('country')}\n                    SelectProps={{ native: true }}\n                    error={Boolean(touched.country && errors.country)}\n                    helperText={touched.country && errors.country}\n                  >\n                    <option value=\"\" />\n                    {countries.map((option) => (\n                      <option key={option.code} value={option.label}>\n                        {option.label}\n                      </option>\n                    ))}\n                  </TextField>\n                  <TextField\n                    fullWidth\n                    label=\"State/Region\"\n                    {...getFieldProps('state')}\n                    error={Boolean(touched.state && errors.state)}\n                    helperText={touched.state && errors.state}\n                  />\n                </Stack> */}\n\n                {/* <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    fullWidth\n                    label=\"City\"\n                    {...getFieldProps('city')}\n                    error={Boolean(touched.city && errors.city)}\n                    helperText={touched.city && errors.city}\n                  />\n                  <TextField fullWidth label=\"Zip/Code\" {...getFieldProps('zipCode')} />\n                </Stack> */}\n\n                {/* <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    fullWidth\n                    label=\"Username\"\n                    {...getFieldProps('username')}\n                    error={Boolean(touched.username && errors.username)}\n                    helperText={touched.username && errors.username}\n                  />\n                </Stack> */}\n\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    fullWidth\n                    label=\"Note\"\n                    multiline\n                    minRows={4}\n                    maxRows={4}\n                    {...getFieldProps('note')}\n                    error={Boolean(touched.note && errors.note)}\n                    helperText={touched.note && errors.note}\n                  />\n                </Stack>\n\n                <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>\n                  <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                    {isEdit && (\n                      <LoadingButton type=\"button\" color=\"error\" variant=\"contained\" onClick={onDeleteUser}>\n                        Delete This User\n                      </LoadingButton>\n                    )}\n                    <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n                      {!isEdit ? 'Create User' : 'Save Changes'}\n                    </LoadingButton>\n                    <LoadingButton type=\"button\" color=\"warning\" variant=\"contained\" onClick={handleAbort}>\n                      Abort\n                    </LoadingButton>\n                  </Stack>\n                </Box>\n              </Stack>\n            </Card>\n          </Grid>\n        </Grid>\n      </Form>\n      {openDeleteConfirm && (\n        <ConfirmDialog\n          message=\"Are you sure you are going to delete this user?\"\n          onConfirm={handleDeleteUser}\n          onClose={handleCloseDeleteConfirm}\n        />\n      )}\n    </FormikProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}