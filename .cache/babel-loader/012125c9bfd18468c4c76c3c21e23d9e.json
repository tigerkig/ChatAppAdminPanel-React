{"ast":null,"code":"var _jsxFileName = \"E:\\\\dev\\\\admin_panel\\\\LocalsAdminPanel\\\\src\\\\components\\\\_dashboard\\\\privatechat\\\\ChatSidebar.js\";\nimport { Icon } from '@iconify/react';\nimport { useState, useEffect } from 'react';\nimport editFill from '@iconify/icons-eva/edit-fill';\nimport { useNavigate, Link as RouterLink } from 'react-router-dom';\nimport arrowIosBackFill from '@iconify/icons-eva/arrow-ios-back-fill';\nimport arrowIosForwardFill from '@iconify/icons-eva/arrow-ios-forward-fill'; // material\n\nimport { useTheme, styled } from '@material-ui/core/styles';\nimport { Box, useMediaQuery } from '@material-ui/core'; // redux\n\nimport { useSelector } from '../../../redux/store'; // utils\n\nimport axios from '../../../utils/axios'; // routes\n\nimport { PATH_DASHBOARD } from '../../../routes/paths';\nimport { MIconButton } from '../../@material-extend';\nimport Scrollbar from '../../Scrollbar';\nimport ChatAccount from './ChatAccount';\nimport ChatSearchResults from './ChatSearchResults';\nimport ChatContactSearch from './ChatContactSearch';\nimport ChatConversationList from './ChatConversationList'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RootStyle = styled('div')(({\n  theme\n}) => ({\n  width: 320,\n  flexShrink: 0,\n  display: 'flex',\n  flexDirection: 'column',\n  transition: theme.transitions.create('width'),\n  borderRight: `1px solid ${theme.palette.divider}`\n})); // ----------------------------------------------------------------------\n\nexport default function ChatSidebar() {\n  const theme = useTheme();\n  const navigate = useNavigate();\n  const isMobile = useMediaQuery(theme.breakpoints.down('md'));\n  const [openSidebar, setOpenSidebar] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [isSearchFocused, setSearchFocused] = useState(false);\n  const displayResults = searchQuery && isSearchFocused;\n  const {\n    conversations,\n    activeConversationId\n  } = useSelector(state => state.privatechat);\n  const [onlyUnreadShow, setOnlyUnreadShow] = useState(false);\n  useEffect(() => {\n    if (isMobile) {\n      return setOpenSidebar(false);\n    }\n\n    return setOpenSidebar(true);\n  }, [isMobile]); // eslint-disable-next-line consistent-return\n\n  useEffect(() => {\n    if (!openSidebar) {\n      return setSearchFocused(false);\n    }\n  }, [openSidebar]);\n\n  const handleClickAwaySearch = () => {\n    setSearchFocused(false);\n    setSearchQuery('');\n  };\n\n  const handleChangeSearch = async event => {\n    try {\n      const {\n        value\n      } = event.target;\n      setSearchQuery(value);\n\n      if (value) {\n        const response = await axios.get('/chat/search', {\n          params: {\n            query: value\n          }\n        });\n        setSearchResults(response.data.results);\n      } else {\n        setSearchResults([]);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleSearchFocus = () => {\n    setSearchFocused(true);\n  };\n\n  const handleSearchSelect = username => {\n    setSearchFocused(false);\n    setSearchQuery('');\n    navigate(`${PATH_DASHBOARD.chat.root}/${username}`);\n  };\n\n  const handleSelectContact = result => {\n    if (handleSearchSelect) {\n      handleSearchSelect(result.username);\n    }\n  };\n\n  const handleUnreadShowChange = e => {\n    setOnlyUnreadShow(e.target.checked);\n  };\n\n  return /*#__PURE__*/_jsxDEV(RootStyle, {\n    sx: { ...(!openSidebar && {\n        width: 96\n      })\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        py: 2,\n        px: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center'\n        },\n        children: [openSidebar && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              flexGrow: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this)\n        }, void 0, false), /*#__PURE__*/_jsxDEV(MIconButton, {\n          onClick: () => setOpenSidebar(!openSidebar),\n          children: /*#__PURE__*/_jsxDEV(Icon, {\n            width: 20,\n            height: 20,\n            icon: openSidebar ? arrowIosBackFill : arrowIosForwardFill\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), openSidebar && /*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(ChatContactSearch, {\n          query: searchQuery,\n          onFocus: handleSearchFocus,\n          onChange: handleChangeSearch,\n          onClickAway: handleClickAwaySearch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Checkbox, {\n          checked: onlyUnreadShow,\n          onChange: handleUnreadShowChange,\n          inputProps: {\n            'aria-label': 'controlled'\n          },\n          label: \"display unread chat partner only\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Scrollbar, {\n      children: /*#__PURE__*/_jsxDEV(ChatConversationList, {\n        conversations: conversations,\n        isOpenSidebar: openSidebar,\n        activeConversationId: activeConversationId // sx={{ ...(isSearchFocused && { display: 'none' }) }}\n        ,\n        query: searchQuery\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["E:/dev/admin_panel/LocalsAdminPanel/src/components/_dashboard/privatechat/ChatSidebar.js"],"names":["Icon","useState","useEffect","editFill","useNavigate","Link","RouterLink","arrowIosBackFill","arrowIosForwardFill","useTheme","styled","Box","useMediaQuery","useSelector","axios","PATH_DASHBOARD","MIconButton","Scrollbar","ChatAccount","ChatSearchResults","ChatContactSearch","ChatConversationList","RootStyle","theme","width","flexShrink","display","flexDirection","transition","transitions","create","borderRight","palette","divider","ChatSidebar","navigate","isMobile","breakpoints","down","openSidebar","setOpenSidebar","searchQuery","setSearchQuery","searchResults","setSearchResults","isSearchFocused","setSearchFocused","displayResults","conversations","activeConversationId","state","privatechat","onlyUnreadShow","setOnlyUnreadShow","handleClickAwaySearch","handleChangeSearch","event","value","target","response","get","params","query","data","results","error","console","handleSearchFocus","handleSearchSelect","username","chat","root","handleSelectContact","result","handleUnreadShowChange","e","checked","py","px","alignItems","flexGrow"],"mappings":"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","sourcesContent":["import { Icon } from '@iconify/react';\nimport { useState, useEffect } from 'react';\nimport editFill from '@iconify/icons-eva/edit-fill';\n\nimport { useNavigate, Link as RouterLink } from 'react-router-dom';\nimport arrowIosBackFill from '@iconify/icons-eva/arrow-ios-back-fill';\nimport arrowIosForwardFill from '@iconify/icons-eva/arrow-ios-forward-fill';\n// material\nimport { useTheme, styled } from '@material-ui/core/styles';\nimport { Box, useMediaQuery } from '@material-ui/core';\n// redux\nimport { useSelector } from '../../../redux/store';\n// utils\nimport axios from '../../../utils/axios';\n// routes\nimport { PATH_DASHBOARD } from '../../../routes/paths';\n\nimport { MIconButton } from '../../@material-extend';\nimport Scrollbar from '../../Scrollbar';\nimport ChatAccount from './ChatAccount';\nimport ChatSearchResults from './ChatSearchResults';\nimport ChatContactSearch from './ChatContactSearch';\nimport ChatConversationList from './ChatConversationList';\n\n// ----------------------------------------------------------------------\n\nconst RootStyle = styled('div')(({ theme }) => ({\n  width: 320,\n  flexShrink: 0,\n  display: 'flex',\n  flexDirection: 'column',\n  transition: theme.transitions.create('width'),\n  borderRight: `1px solid ${theme.palette.divider}`\n}));\n\n// ----------------------------------------------------------------------\n\nexport default function ChatSidebar() {\n  const theme = useTheme();\n  const navigate = useNavigate();\n  const isMobile = useMediaQuery(theme.breakpoints.down('md'));\n  const [openSidebar, setOpenSidebar] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [isSearchFocused, setSearchFocused] = useState(false);\n  const displayResults = searchQuery && isSearchFocused;\n  const { conversations, activeConversationId } = useSelector((state) => state.privatechat);\n  const [onlyUnreadShow, setOnlyUnreadShow] = useState(false);\n\n  useEffect(() => {\n    if (isMobile) {\n      return setOpenSidebar(false);\n    }\n    return setOpenSidebar(true);\n  }, [isMobile]);\n\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    if (!openSidebar) {\n      return setSearchFocused(false);\n    }\n  }, [openSidebar]);\n\n  const handleClickAwaySearch = () => {\n    setSearchFocused(false);\n    setSearchQuery('');\n  };\n\n  const handleChangeSearch = async (event) => {\n    try {\n      const { value } = event.target;\n      setSearchQuery(value);\n      if (value) {\n        const response = await axios.get('/chat/search', {\n          params: { query: value }\n        });\n        setSearchResults(response.data.results);\n      } else {\n        setSearchResults([]);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleSearchFocus = () => {\n    setSearchFocused(true);\n  };\n\n  const handleSearchSelect = (username) => {\n    setSearchFocused(false);\n    setSearchQuery('');\n    navigate(`${PATH_DASHBOARD.chat.root}/${username}`);\n  };\n\n  const handleSelectContact = (result) => {\n    if (handleSearchSelect) {\n      handleSearchSelect(result.username);\n    }\n  };\n\n  const handleUnreadShowChange = (e) => {\n    setOnlyUnreadShow(e.target.checked);\n  };\n\n  return (\n    <RootStyle sx={{ ...(!openSidebar && { width: 96 }) }}>\n      <Box sx={{ py: 2, px: 3 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n          {openSidebar && (\n            <>\n              <Box sx={{ flexGrow: 1 }} />\n            </>\n          )}\n\n          <MIconButton onClick={() => setOpenSidebar(!openSidebar)}>\n            <Icon width={20} height={20} icon={openSidebar ? arrowIosBackFill : arrowIosForwardFill} />\n          </MIconButton>\n        </Box>\n\n        {openSidebar && (\n          <Box>\n            <ChatContactSearch\n              query={searchQuery}\n              onFocus={handleSearchFocus}\n              onChange={handleChangeSearch}\n              onClickAway={handleClickAwaySearch}\n            />\n            <Checkbox\n              checked={onlyUnreadShow}\n              onChange={handleUnreadShowChange}\n              inputProps={{ 'aria-label': 'controlled' }}\n              label='display unread chat partner only'\n            />\n          </Box>\n        )}\n      </Box>\n\n      <Scrollbar>\n        {/* {!displayResults ? ( */}\n        <ChatConversationList\n          conversations={conversations}\n          isOpenSidebar={openSidebar}\n          activeConversationId={activeConversationId}\n          // sx={{ ...(isSearchFocused && { display: 'none' }) }}\n          query={searchQuery}\n        />\n        {/* ) : (\n          <ChatSearchResults query={searchQuery} results={searchResults} onSelectContact={handleSelectContact} />\n        )} */}\n      </Scrollbar>\n    </RootStyle>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}