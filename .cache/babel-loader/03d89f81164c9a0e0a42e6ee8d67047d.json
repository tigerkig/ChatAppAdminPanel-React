{"ast":null,"code":"/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\n\n\nfunction concat(...args) {\n  const joined = args.map(x => source(x)).join(\"\");\n  return joined;\n}\n/*\nLanguage: Augmented Backus-Naur Form\nAuthor: Alex McKibben <alex@nullscope.net>\nWebsite: https://tools.ietf.org/html/rfc5234\nAudit: 2020\n*/\n\n/** @type LanguageFn */\n\n\nfunction abnf(hljs) {\n  const IDENT = /^[a-zA-Z][a-zA-Z0-9-]*/;\n  const KEYWORDS = [\"ALPHA\", \"BIT\", \"CHAR\", \"CR\", \"CRLF\", \"CTL\", \"DIGIT\", \"DQUOTE\", \"HEXDIG\", \"HTAB\", \"LF\", \"LWSP\", \"OCTET\", \"SP\", \"VCHAR\", \"WSP\"];\n  const COMMENT = hljs.COMMENT(/;/, /$/);\n  const TERMINAL_BINARY = {\n    scope: \"symbol\",\n    match: /%b[0-1]+(-[0-1]+|(\\.[0-1]+)+)?/\n  };\n  const TERMINAL_DECIMAL = {\n    scope: \"symbol\",\n    match: /%d[0-9]+(-[0-9]+|(\\.[0-9]+)+)?/\n  };\n  const TERMINAL_HEXADECIMAL = {\n    scope: \"symbol\",\n    match: /%x[0-9A-F]+(-[0-9A-F]+|(\\.[0-9A-F]+)+)?/\n  };\n  const CASE_SENSITIVITY = {\n    scope: \"symbol\",\n    match: /%[si](?=\".*\")/\n  };\n  const RULE_DECLARATION = {\n    scope: \"attribute\",\n    match: concat(IDENT, /(?=\\s*=)/)\n  };\n  const ASSIGNMENT = {\n    scope: \"operator\",\n    match: /=\\/?/\n  };\n  return {\n    name: 'Augmented Backus-Naur Form',\n    illegal: /[!@#$^&',?+~`|:]/,\n    keywords: KEYWORDS,\n    contains: [ASSIGNMENT, RULE_DECLARATION, COMMENT, TERMINAL_BINARY, TERMINAL_DECIMAL, TERMINAL_HEXADECIMAL, CASE_SENSITIVITY, hljs.QUOTE_STRING_MODE, hljs.NUMBER_MODE]\n  };\n}\n\nmodule.exports = abnf;","map":{"version":3,"sources":["E:/dev/admin_panel/LocalsAdminPanel/node_modules/highlight.js/lib/languages/abnf.js"],"names":["source","re","concat","args","joined","map","x","join","abnf","hljs","IDENT","KEYWORDS","COMMENT","TERMINAL_BINARY","scope","match","TERMINAL_DECIMAL","TERMINAL_HEXADECIMAL","CASE_SENSITIVITY","RULE_DECLARATION","ASSIGNMENT","name","illegal","keywords","contains","QUOTE_STRING_MODE","NUMBER_MODE","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAASA,MAAT,CAAgBC,EAAhB,EAAoB;AAClB,MAAI,CAACA,EAAL,EAAS,OAAO,IAAP;AACT,MAAI,OAAOA,EAAP,KAAc,QAAlB,EAA4B,OAAOA,EAAP;AAE5B,SAAOA,EAAE,CAACD,MAAV;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASE,MAAT,CAAgB,GAAGC,IAAnB,EAAyB;AACvB,QAAMC,MAAM,GAAGD,IAAI,CAACE,GAAL,CAAUC,CAAD,IAAON,MAAM,CAACM,CAAD,CAAtB,EAA2BC,IAA3B,CAAgC,EAAhC,CAAf;AACA,SAAOH,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AACA,SAASI,IAAT,CAAcC,IAAd,EAAoB;AAClB,QAAMC,KAAK,GAAG,wBAAd;AAEA,QAAMC,QAAQ,GAAG,CACf,OADe,EAEf,KAFe,EAGf,MAHe,EAIf,IAJe,EAKf,MALe,EAMf,KANe,EAOf,OAPe,EAQf,QARe,EASf,QATe,EAUf,MAVe,EAWf,IAXe,EAYf,MAZe,EAaf,OAbe,EAcf,IAde,EAef,OAfe,EAgBf,KAhBe,CAAjB;AAmBA,QAAMC,OAAO,GAAGH,IAAI,CAACG,OAAL,CAAa,GAAb,EAAkB,GAAlB,CAAhB;AAEA,QAAMC,eAAe,GAAG;AACtBC,IAAAA,KAAK,EAAE,QADe;AAEtBC,IAAAA,KAAK,EAAE;AAFe,GAAxB;AAKA,QAAMC,gBAAgB,GAAG;AACvBF,IAAAA,KAAK,EAAE,QADgB;AAEvBC,IAAAA,KAAK,EAAE;AAFgB,GAAzB;AAKA,QAAME,oBAAoB,GAAG;AAC3BH,IAAAA,KAAK,EAAE,QADoB;AAE3BC,IAAAA,KAAK,EAAE;AAFoB,GAA7B;AAKA,QAAMG,gBAAgB,GAAG;AACvBJ,IAAAA,KAAK,EAAE,QADgB;AAEvBC,IAAAA,KAAK,EAAE;AAFgB,GAAzB;AAKA,QAAMI,gBAAgB,GAAG;AACvBL,IAAAA,KAAK,EAAE,WADgB;AAEvBC,IAAAA,KAAK,EAAEb,MAAM,CAACQ,KAAD,EAAQ,UAAR;AAFU,GAAzB;AAKA,QAAMU,UAAU,GAAG;AACjBN,IAAAA,KAAK,EAAE,UADU;AAEjBC,IAAAA,KAAK,EAAE;AAFU,GAAnB;AAKA,SAAO;AACLM,IAAAA,IAAI,EAAE,4BADD;AAELC,IAAAA,OAAO,EAAE,kBAFJ;AAGLC,IAAAA,QAAQ,EAAEZ,QAHL;AAILa,IAAAA,QAAQ,EAAE,CACRJ,UADQ,EAERD,gBAFQ,EAGRP,OAHQ,EAIRC,eAJQ,EAKRG,gBALQ,EAMRC,oBANQ,EAORC,gBAPQ,EAQRT,IAAI,CAACgB,iBARG,EASRhB,IAAI,CAACiB,WATG;AAJL,GAAP;AAgBD;;AAEDC,MAAM,CAACC,OAAP,GAAiBpB,IAAjB","sourcesContent":["/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: Augmented Backus-Naur Form\nAuthor: Alex McKibben <alex@nullscope.net>\nWebsite: https://tools.ietf.org/html/rfc5234\nAudit: 2020\n*/\n\n/** @type LanguageFn */\nfunction abnf(hljs) {\n  const IDENT = /^[a-zA-Z][a-zA-Z0-9-]*/;\n\n  const KEYWORDS = [\n    \"ALPHA\",\n    \"BIT\",\n    \"CHAR\",\n    \"CR\",\n    \"CRLF\",\n    \"CTL\",\n    \"DIGIT\",\n    \"DQUOTE\",\n    \"HEXDIG\",\n    \"HTAB\",\n    \"LF\",\n    \"LWSP\",\n    \"OCTET\",\n    \"SP\",\n    \"VCHAR\",\n    \"WSP\"\n  ];\n\n  const COMMENT = hljs.COMMENT(/;/, /$/);\n\n  const TERMINAL_BINARY = {\n    scope: \"symbol\",\n    match: /%b[0-1]+(-[0-1]+|(\\.[0-1]+)+)?/\n  };\n\n  const TERMINAL_DECIMAL = {\n    scope: \"symbol\",\n    match: /%d[0-9]+(-[0-9]+|(\\.[0-9]+)+)?/\n  };\n\n  const TERMINAL_HEXADECIMAL = {\n    scope: \"symbol\",\n    match: /%x[0-9A-F]+(-[0-9A-F]+|(\\.[0-9A-F]+)+)?/\n  };\n\n  const CASE_SENSITIVITY = {\n    scope: \"symbol\",\n    match: /%[si](?=\".*\")/\n  };\n\n  const RULE_DECLARATION = {\n    scope: \"attribute\",\n    match: concat(IDENT, /(?=\\s*=)/)\n  };\n\n  const ASSIGNMENT = {\n    scope: \"operator\",\n    match: /=\\/?/\n  };\n\n  return {\n    name: 'Augmented Backus-Naur Form',\n    illegal: /[!@#$^&',?+~`|:]/,\n    keywords: KEYWORDS,\n    contains: [\n      ASSIGNMENT,\n      RULE_DECLARATION,\n      COMMENT,\n      TERMINAL_BINARY,\n      TERMINAL_DECIMAL,\n      TERMINAL_HEXADECIMAL,\n      CASE_SENSITIVITY,\n      hljs.QUOTE_STRING_MODE,\n      hljs.NUMBER_MODE\n    ]\n  };\n}\n\nmodule.exports = abnf;\n"]},"metadata":{},"sourceType":"script"}