{"ast":null,"code":"var _jsxFileName = \"E:\\\\dev\\\\admin_panel\\\\LocalsAdminPanel\\\\src\\\\components\\\\_dashboard\\\\chat\\\\ChatAdminMessageForm.js\";\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { useCallback } from 'react';\nimport { useSnackbar } from 'notistack5';\nimport { useNavigate } from 'react-router-dom';\nimport { Form, FormikProvider, useFormik } from 'formik'; // material\n\nimport { LoadingButton } from '@material-ui/lab';\nimport { Box, Card, Grid, Stack, Switch, TextField, Typography, FormHelperText, FormControlLabel } from '@material-ui/core'; // utils\n\nimport axios from '../../../utils/axios';\nimport { fData } from '../../../utils/formatNumber';\nimport fakeRequest from '../../../utils/fakeRequest'; // routes\n\nimport { PATH_DASHBOARD } from '../../../routes/paths'; //\n\nimport Label from '../../Label';\nimport { UploadAvatar } from '../../upload'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nProhibitedWordNewForm.propTypes = {\n  isEdit: PropTypes.bool,\n  currentWord: PropTypes.object\n};\nexport default function ProhibitedWordNewForm({\n  isEdit,\n  currentWord\n}) {\n  const navigate = useNavigate();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const NewUserSchema = Yup.object().shape({\n    word: Yup.string().required('Word is required')\n  });\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      word: (currentWord === null || currentWord === void 0 ? void 0 : currentWord.word) || ''\n    },\n    validationSchema: NewUserSchema,\n    onSubmit: async (values, {\n      setSubmitting,\n      resetForm,\n      setErrors\n    }) => {\n      try {\n        await fakeRequest(500);\n\n        if (!isEdit) {\n          await axios.post('/prohibited-words/', values);\n        } else {\n          await axios.put(`/prohibited-words?word=${currentWord === null || currentWord === void 0 ? void 0 : currentWord.word}`, values);\n        }\n\n        resetForm();\n        setSubmitting(false);\n        enqueueSnackbar(!isEdit ? 'Create success' : 'Update success', {\n          variant: 'success'\n        });\n        navigate(PATH_DASHBOARD.prohibitedwords.list);\n      } catch (error) {\n        console.error(error);\n        setSubmitting(false);\n        setErrors(error);\n      }\n    }\n  });\n  const {\n    errors,\n    values,\n    touched,\n    handleSubmit,\n    isSubmitting,\n    setFieldValue,\n    getFieldProps\n  } = formik;\n  return /*#__PURE__*/_jsxDEV(FormikProvider, {\n    value: formik,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      noValidate: true,\n      autoComplete: \"off\",\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 8,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            sx: {\n              p: 3\n            },\n            children: /*#__PURE__*/_jsxDEV(Stack, {\n              spacing: 3,\n              children: [/*#__PURE__*/_jsxDEV(Stack, {\n                direction: {\n                  xs: 'column',\n                  sm: 'row'\n                },\n                spacing: {\n                  xs: 3,\n                  sm: 2\n                },\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Prohibited Word\",\n                  ...getFieldProps('word'),\n                  error: Boolean(touched.word && errors.word),\n                  helperText: touched.word && errors.word\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 83,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  mt: 3,\n                  display: 'flex',\n                  justifyContent: 'flex-end'\n                },\n                children: /*#__PURE__*/_jsxDEV(LoadingButton, {\n                  type: \"submit\",\n                  variant: \"contained\",\n                  loading: isSubmitting,\n                  children: !isEdit ? 'Create Prohibited Word' : 'Save Changes'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["E:/dev/admin_panel/LocalsAdminPanel/src/components/_dashboard/chat/ChatAdminMessageForm.js"],"names":["Yup","PropTypes","useCallback","useSnackbar","useNavigate","Form","FormikProvider","useFormik","LoadingButton","Box","Card","Grid","Stack","Switch","TextField","Typography","FormHelperText","FormControlLabel","axios","fData","fakeRequest","PATH_DASHBOARD","Label","UploadAvatar","ProhibitedWordNewForm","propTypes","isEdit","bool","currentWord","object","navigate","enqueueSnackbar","NewUserSchema","shape","word","string","required","formik","enableReinitialize","initialValues","validationSchema","onSubmit","values","setSubmitting","resetForm","setErrors","post","put","variant","prohibitedwords","list","error","console","errors","touched","handleSubmit","isSubmitting","setFieldValue","getFieldProps","p","xs","sm","Boolean","mt","display","justifyContent"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { useCallback } from 'react';\nimport { useSnackbar } from 'notistack5';\nimport { useNavigate } from 'react-router-dom';\nimport { Form, FormikProvider, useFormik } from 'formik';\n// material\nimport { LoadingButton } from '@material-ui/lab';\nimport {\n  Box,\n  Card,\n  Grid,\n  Stack,\n  Switch,\n  TextField,\n  Typography,\n  FormHelperText,\n  FormControlLabel\n} from '@material-ui/core';\n// utils\nimport axios from '../../../utils/axios';\nimport { fData } from '../../../utils/formatNumber';\nimport fakeRequest from '../../../utils/fakeRequest';\n// routes\nimport { PATH_DASHBOARD } from '../../../routes/paths';\n//\nimport Label from '../../Label';\nimport { UploadAvatar } from '../../upload';\n\n// ----------------------------------------------------------------------\n\nProhibitedWordNewForm.propTypes = {\n  isEdit: PropTypes.bool,\n  currentWord: PropTypes.object\n};\n\nexport default function ProhibitedWordNewForm({ isEdit, currentWord }) {\n  const navigate = useNavigate();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const NewUserSchema = Yup.object().shape({\n    word: Yup.string().required('Word is required')\n  });\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      word: currentWord?.word || ''\n    },\n    validationSchema: NewUserSchema,\n    onSubmit: async (values, { setSubmitting, resetForm, setErrors }) => {\n      try {\n        await fakeRequest(500);\n\n        if (!isEdit) {\n          await axios.post('/prohibited-words/', values);\n        } else {\n          await axios.put(`/prohibited-words?word=${currentWord?.word}`, values);\n        }\n\n        resetForm();\n        setSubmitting(false);\n        enqueueSnackbar(!isEdit ? 'Create success' : 'Update success', { variant: 'success' });\n        navigate(PATH_DASHBOARD.prohibitedwords.list);\n      } catch (error) {\n        console.error(error);\n        setSubmitting(false);\n        setErrors(error);\n      }\n    }\n  });\n\n  const { errors, values, touched, handleSubmit, isSubmitting, setFieldValue, getFieldProps } = formik;\n\n  return (\n    <FormikProvider value={formik}>\n      <Form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={8}>\n            <Card sx={{ p: 3 }}>\n              <Stack spacing={3}>\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    fullWidth\n                    label=\"Prohibited Word\"\n                    {...getFieldProps('word')}\n                    error={Boolean(touched.word && errors.word)}\n                    helperText={touched.word && errors.word}\n                  />\n                </Stack>\n\n                <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>\n                  <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n                    {!isEdit ? 'Create Prohibited Word' : 'Save Changes'}\n                  </LoadingButton>\n                </Box>\n              </Stack>\n            </Card>\n          </Grid>\n        </Grid>\n      </Form>\n    </FormikProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}