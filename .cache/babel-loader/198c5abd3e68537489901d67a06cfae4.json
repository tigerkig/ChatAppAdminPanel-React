{"ast":null,"code":"var _jsxFileName = \"E:\\\\dev\\\\admin_panel\\\\LocalsAdminPanel\\\\src\\\\components\\\\_dashboard\\\\privatechat\\\\ChatMessageList.js\";\nimport PropTypes from 'prop-types';\nimport { findIndex } from 'lodash';\nimport { useEffect, useState, useRef } from 'react'; //\n\nimport Scrollbar from '../../Scrollbar';\nimport LightboxModal from '../../LightboxModal';\nimport ChatMessageItem from './ChatMessageItem'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChatMessageList.propTypes = {\n  conversation: PropTypes.object.isRequired\n};\nexport default function ChatMessageList({\n  conversation\n}) {\n  const scrollRef = useRef();\n  const [openLightbox, setOpenLightbox] = useState(false);\n  const [selectedImage, setSelectedImage] = useState(null);\n  useEffect(() => {\n    const scrollMessagesToBottom = () => {\n      if (scrollRef.current) {\n        scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n      }\n    };\n\n    scrollMessagesToBottom();\n  }, [conversation.messages]);\n  const images = conversation.messages.map(message => message.imgs.map(img => img));\n  console.log(images);\n\n  const handleOpenLightbox = url => {\n    const selectedImage = findIndex(images, index => index === url);\n    setOpenLightbox(true);\n    setSelectedImage(selectedImage);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Scrollbar, {\n    scrollableNodeProps: {\n      ref: scrollRef\n    },\n    sx: {\n      p: 3,\n      flexGrow: 1\n    },\n    children: [conversation.messages.map(message => /*#__PURE__*/_jsxDEV(ChatMessageItem, {\n      message: message,\n      conversation: conversation,\n      onOpenLightbox: handleOpenLightbox\n    }, message._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(LightboxModal, {\n      images: images,\n      photoIndex: selectedImage,\n      setPhotoIndex: setSelectedImage,\n      isOpen: openLightbox,\n      onClose: () => setOpenLightbox(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["E:/dev/admin_panel/LocalsAdminPanel/src/components/_dashboard/privatechat/ChatMessageList.js"],"names":["PropTypes","findIndex","useEffect","useState","useRef","Scrollbar","LightboxModal","ChatMessageItem","ChatMessageList","propTypes","conversation","object","isRequired","scrollRef","openLightbox","setOpenLightbox","selectedImage","setSelectedImage","scrollMessagesToBottom","current","scrollTop","scrollHeight","messages","images","map","message","imgs","img","console","log","handleOpenLightbox","url","index","ref","p","flexGrow","_id"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,MAA9B,QAA4C,OAA5C,C,CACA;;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AACA,OAAOC,eAAP,MAA4B,mBAA5B,C,CAEA;;;AAEAC,eAAe,CAACC,SAAhB,GAA4B;AAC1BC,EAAAA,YAAY,EAAEV,SAAS,CAACW,MAAV,CAAiBC;AADL,CAA5B;AAIA,eAAe,SAASJ,eAAT,CAAyB;AAAEE,EAAAA;AAAF,CAAzB,EAA2C;AACxD,QAAMG,SAAS,GAAGT,MAAM,EAAxB;AACA,QAAM,CAACU,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACa,aAAD,EAAgBC,gBAAhB,IAAoCd,QAAQ,CAAC,IAAD,CAAlD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,sBAAsB,GAAG,MAAM;AACnC,UAAIL,SAAS,CAACM,OAAd,EAAuB;AACrBN,QAAAA,SAAS,CAACM,OAAV,CAAkBC,SAAlB,GAA8BP,SAAS,CAACM,OAAV,CAAkBE,YAAhD;AACD;AACF,KAJD;;AAKAH,IAAAA,sBAAsB;AACvB,GAPQ,EAON,CAACR,YAAY,CAACY,QAAd,CAPM,CAAT;AASA,QAAMC,MAAM,GAAGb,YAAY,CAACY,QAAb,CAAsBE,GAAtB,CAA2BC,OAAD,IAAaA,OAAO,CAACC,IAAR,CAAaF,GAAb,CAAkBG,GAAD,IAASA,GAA1B,CAAvC,CAAf;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,MAAZ;;AAEA,QAAMO,kBAAkB,GAAIC,GAAD,IAAS;AAClC,UAAMf,aAAa,GAAGf,SAAS,CAACsB,MAAD,EAAUS,KAAD,IAAWA,KAAK,KAAKD,GAA9B,CAA/B;AACAhB,IAAAA,eAAe,CAAC,IAAD,CAAf;AACAE,IAAAA,gBAAgB,CAACD,aAAD,CAAhB;AACD,GAJD;;AAMA,sBACE,QAAC,SAAD;AAAW,IAAA,mBAAmB,EAAE;AAAEiB,MAAAA,GAAG,EAAEpB;AAAP,KAAhC;AAAoD,IAAA,EAAE,EAAE;AAAEqB,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,QAAQ,EAAE;AAAlB,KAAxD;AAAA,eACGzB,YAAY,CAACY,QAAb,CAAsBE,GAAtB,CAA2BC,OAAD,iBACzB,QAAC,eAAD;AAEE,MAAA,OAAO,EAAEA,OAFX;AAGE,MAAA,YAAY,EAAEf,YAHhB;AAIE,MAAA,cAAc,EAAEoB;AAJlB,OACOL,OAAO,CAACW,GADf;AAAA;AAAA;AAAA;AAAA,YADD,CADH,eAUE,QAAC,aAAD;AACE,MAAA,MAAM,EAAEb,MADV;AAEE,MAAA,UAAU,EAAEP,aAFd;AAGE,MAAA,aAAa,EAAEC,gBAHjB;AAIE,MAAA,MAAM,EAAEH,YAJV;AAKE,MAAA,OAAO,EAAE,MAAMC,eAAe,CAAC,KAAD;AALhC;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD","sourcesContent":["import PropTypes from 'prop-types';\nimport { findIndex } from 'lodash';\nimport { useEffect, useState, useRef } from 'react';\n//\nimport Scrollbar from '../../Scrollbar';\nimport LightboxModal from '../../LightboxModal';\nimport ChatMessageItem from './ChatMessageItem';\n\n// ----------------------------------------------------------------------\n\nChatMessageList.propTypes = {\n  conversation: PropTypes.object.isRequired\n};\n\nexport default function ChatMessageList({ conversation }) {\n  const scrollRef = useRef();\n  const [openLightbox, setOpenLightbox] = useState(false);\n  const [selectedImage, setSelectedImage] = useState(null);\n\n  useEffect(() => {\n    const scrollMessagesToBottom = () => {\n      if (scrollRef.current) {\n        scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n      }\n    };\n    scrollMessagesToBottom();\n  }, [conversation.messages]);\n\n  const images = conversation.messages.map((message) => message.imgs.map((img) => img));\n  console.log(images);\n\n  const handleOpenLightbox = (url) => {\n    const selectedImage = findIndex(images, (index) => index === url);\n    setOpenLightbox(true);\n    setSelectedImage(selectedImage);\n  };\n\n  return (\n    <Scrollbar scrollableNodeProps={{ ref: scrollRef }} sx={{ p: 3, flexGrow: 1 }}>\n      {conversation.messages.map((message) => (\n        <ChatMessageItem\n          key={message._id}\n          message={message}\n          conversation={conversation}\n          onOpenLightbox={handleOpenLightbox}\n        />\n      ))}\n\n      <LightboxModal\n        images={images}\n        photoIndex={selectedImage}\n        setPhotoIndex={setSelectedImage}\n        isOpen={openLightbox}\n        onClose={() => setOpenLightbox(false)}\n      />\n    </Scrollbar>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}