{"ast":null,"code":"var _jsxFileName = \"E:\\\\dev\\\\admin_panel\\\\LocalsAdminPanel\\\\src\\\\pages\\\\dashboard\\\\PrivateChat.js\";\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport socketio from 'socket.io-client'; // material\n\nimport { Card, Container } from '@material-ui/core'; // redux\n\nimport { useDispatch, useSelector } from '../../redux/store';\nimport { getUserList } from '../../redux/slices/user';\nimport { getConversations, getContacts, onConnectChat, getConversation } from '../../redux/slices/privatechat';\nimport { getSettingsList } from '../../redux/slices/settings'; // routes\n\nimport { PATH_DASHBOARD } from '../../routes/paths'; // hooks\n\nimport useSettings from '../../hooks/useSettings';\nimport useAuth from '../../hooks/useAuth'; // components\n\nimport Page from '../../components/Page';\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\nimport { ChatSidebar, ChatWindow, ChatAdminMessageForm } from '../../components/_dashboard/privatechat';\nimport { serverConfig } from '../../config'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PrivateChat() {\n  const {\n    themeStretch\n  } = useSettings();\n  const dispatch = useDispatch();\n  const {\n    user\n  } = useAuth();\n  const {\n    opponentId\n  } = useParams();\n  const {\n    settingsList\n  } = useSelector(state => state.setting);\n  const chatSettings = settingsList.find(settingRow => settingRow.type === 'chat');\n  const {\n    activeConversationId\n  } = useSelector(state => state.privatechat);\n  const [currentConversationId, setCurrentCoversationId] = useState(null);\n  console.log('Private Chat');\n  useEffect(() => {\n    if (opponentId) {\n      const lastMessage = (chatSettings === null || chatSettings === void 0 ? void 0 : chatSettings.settings.admin_message) || 'Please leave a message, I will reply to you as soon as possible. You may talk about anything: advertising, complaining, suggestions, advice, cooperation, etc.';\n      dispatch(onConnectChat(user._id, opponentId, lastMessage));\n    }\n  }, [dispatch, opponentId]);\n  useEffect(() => {\n    dispatch(getUserList());\n    dispatch(getConversations());\n    dispatch(getContacts());\n    dispatch(getSettingsList());\n  }, [dispatch]);\n  const [socket, setSocket] = useState(null);\n  useEffect(() => {\n    const newSocket = socketio.connect(`${serverConfig.socketUrl}/api/message`, {\n      // EIO: 2,\n      // reconnect: true,\n      transports: ['websocket']\n    });\n    newSocket.on('connect', () => {\n      console.log('Successfully connected');\n    });\n    newSocket.on('connect_failed', () => {\n      console.log('Connection Failed');\n    });\n    newSocket.on('disconnect', () => {\n      console.log('Disconnected');\n    });\n    newSocket.on('msgReceive', handleReceiveMessage);\n    newSocket.on('onDeleted', handleDeleteMessage);\n    newSocket.on('onTyping', onTyping);\n    setSocket(newSocket);\n    return () => newSocket.close();\n  }, [setSocket]);\n  useEffect(() => {\n    if (activeConversationId) {\n      if (currentConversationId && currentConversationId !== activeConversationId) {\n        console.log('leaveChat', currentConversationId);\n        socket.emit('leaveChat', JSON.stringify({\n          chatId: currentConversationId\n        }));\n      }\n\n      console.log('joinChat', activeConversationId);\n      const params = {\n        chatId: activeConversationId\n      };\n      socket.emit('joinChat', JSON.stringify(params));\n      setCurrentCoversationId(activeConversationId);\n    }\n  }, [socket, dispatch, activeConversationId]);\n\n  const handleReceiveMessage = async value => {\n    console.log(activeConversationId, value);\n\n    if (activeConversationId) {\n      dispatch(getConversation(activeConversationId));\n    }\n  };\n\n  const handleDeleteMessage = async value => {\n    console.log(value);\n    dispatch(getConversation(activeConversationId));\n  };\n\n  const onTyping = async value => {\n    console.log(value);\n  };\n\n  const [roomListSocket, setRoomListSocket] = useState(null);\n  useEffect(() => {\n    console.log('RoomList Socket!');\n    const newSocket = socketio.connect(`${serverConfig.socketUrl}/api/chatRoomList`, {\n      // reconnect: true,\n      transports: ['websocket']\n    });\n    newSocket.on('connect', () => {\n      console.log('Successfully connected: api/chatRoomList');\n    });\n    newSocket.on('updateChatRoomList', handleUpdateChatRoomList);\n    setRoomListSocket(newSocket);\n    return () => newSocket.close();\n  }, [setRoomListSocket]);\n\n  const handleUpdateChatRoomList = () => {\n    console.log('handleUpdateChatRoomList');\n    dispatch(getConversations());\n  };\n\n  return /*#__PURE__*/_jsxDEV(Page, {\n    title: \"Chat | Locals\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: themeStretch ? false : 'xl',\n      children: [/*#__PURE__*/_jsxDEV(HeaderBreadcrumbs, {\n        heading: \"Private Chat\",\n        links: [{\n          name: 'Dashboard',\n          href: PATH_DASHBOARD.root\n        }, {\n          name: 'Private Chat'\n        }]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatAdminMessageForm, {\n        chatSettings: chatSettings\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          height: '72vh',\n          display: 'flex'\n        },\n        children: [/*#__PURE__*/_jsxDEV(ChatSidebar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), socket && /*#__PURE__*/_jsxDEV(ChatWindow, {\n          socket: socket\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["E:/dev/admin_panel/LocalsAdminPanel/src/pages/dashboard/PrivateChat.js"],"names":["useEffect","useState","useParams","socketio","Card","Container","useDispatch","useSelector","getUserList","getConversations","getContacts","onConnectChat","getConversation","getSettingsList","PATH_DASHBOARD","useSettings","useAuth","Page","HeaderBreadcrumbs","ChatSidebar","ChatWindow","ChatAdminMessageForm","serverConfig","PrivateChat","themeStretch","dispatch","user","opponentId","settingsList","state","setting","chatSettings","find","settingRow","type","activeConversationId","privatechat","currentConversationId","setCurrentCoversationId","console","log","lastMessage","settings","admin_message","_id","socket","setSocket","newSocket","connect","socketUrl","transports","on","handleReceiveMessage","handleDeleteMessage","onTyping","close","emit","JSON","stringify","chatId","params","value","roomListSocket","setRoomListSocket","handleUpdateChatRoomList","name","href","root","height","display"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport socketio from 'socket.io-client';\n// material\nimport { Card, Container } from '@material-ui/core';\n// redux\nimport { useDispatch, useSelector } from '../../redux/store';\nimport { getUserList } from '../../redux/slices/user';\nimport { getConversations, getContacts, onConnectChat, getConversation } from '../../redux/slices/privatechat';\nimport { getSettingsList } from '../../redux/slices/settings';\n// routes\nimport { PATH_DASHBOARD } from '../../routes/paths';\n// hooks\nimport useSettings from '../../hooks/useSettings';\nimport useAuth from '../../hooks/useAuth';\n// components\nimport Page from '../../components/Page';\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\nimport { ChatSidebar, ChatWindow, ChatAdminMessageForm } from '../../components/_dashboard/privatechat';\nimport { serverConfig } from '../../config';\n\n// ----------------------------------------------------------------------\n\nexport default function PrivateChat() {\n  const { themeStretch } = useSettings();\n  const dispatch = useDispatch();\n  const { user } = useAuth();\n  const { opponentId } = useParams();\n  const { settingsList } = useSelector((state) => state.setting);\n  const chatSettings = settingsList.find((settingRow) => settingRow.type === 'chat');\n  const { activeConversationId } = useSelector((state) => state.privatechat);\n  const [currentConversationId, setCurrentCoversationId] = useState(null);\n\n  console.log('Private Chat');\n\n  useEffect(() => {\n    if (opponentId) {\n      const lastMessage =\n        chatSettings?.settings.admin_message ||\n        'Please leave a message, I will reply to you as soon as possible. You may talk about anything: advertising, complaining, suggestions, advice, cooperation, etc.';\n      dispatch(onConnectChat(user._id, opponentId, lastMessage));\n    }\n  }, [dispatch, opponentId]);\n\n  useEffect(() => {\n    dispatch(getUserList());\n    dispatch(getConversations());\n    dispatch(getContacts());\n    dispatch(getSettingsList());\n  }, [dispatch]);\n\n  const [socket, setSocket] = useState(null);\n\n  useEffect(() => {\n    const newSocket = socketio.connect(`${serverConfig.socketUrl}/api/message`, {\n      // EIO: 2,\n      // reconnect: true,\n      transports: ['websocket']\n    });\n    newSocket.on('connect', () => {\n      console.log('Successfully connected');\n    });\n    newSocket.on('connect_failed', () => {\n      console.log('Connection Failed');\n    });\n    newSocket.on('disconnect', () => {\n      console.log('Disconnected');\n    });\n    newSocket.on('msgReceive', handleReceiveMessage);\n    newSocket.on('onDeleted', handleDeleteMessage);\n    newSocket.on('onTyping', onTyping);\n    setSocket(newSocket);\n    return () => newSocket.close();\n  }, [setSocket]);\n\n  useEffect(() => {\n    if (activeConversationId) {\n      if (currentConversationId && currentConversationId !== activeConversationId) {\n        console.log('leaveChat', currentConversationId);\n        socket.emit(\n          'leaveChat',\n          JSON.stringify({\n            chatId: currentConversationId\n          })\n        );\n      }\n      console.log('joinChat', activeConversationId);\n      const params = { chatId: activeConversationId };\n      socket.emit('joinChat', JSON.stringify(params));\n      setCurrentCoversationId(activeConversationId);\n    }\n  }, [socket, dispatch, activeConversationId]);\n\n  const handleReceiveMessage = async (value) => {\n    console.log(activeConversationId, value);\n    if (activeConversationId) {\n      dispatch(getConversation(activeConversationId));\n    }\n  };\n\n  const handleDeleteMessage = async (value) => {\n    console.log(value);\n    dispatch(getConversation(activeConversationId));\n  };\n\n  const onTyping = async (value) => {\n    console.log(value);\n  };\n\n  const [roomListSocket, setRoomListSocket] = useState(null);\n\n  useEffect(() => {\n    console.log('RoomList Socket!');\n    const newSocket = socketio.connect(`${serverConfig.socketUrl}/api/chatRoomList`, {\n      // reconnect: true,\n      transports: ['websocket']\n    });\n    newSocket.on('connect', () => {\n      console.log('Successfully connected: api/chatRoomList');\n    });\n    newSocket.on('updateChatRoomList', handleUpdateChatRoomList);\n    setRoomListSocket(newSocket);\n    return () => newSocket.close();\n  }, [setRoomListSocket]);\n\n  const handleUpdateChatRoomList = () => {\n    console.log('handleUpdateChatRoomList');\n    dispatch(getConversations());\n  };\n\n  return (\n    <Page title=\"Chat | Locals\">\n      <Container maxWidth={themeStretch ? false : 'xl'}>\n        <HeaderBreadcrumbs\n          heading=\"Private Chat\"\n          links={[{ name: 'Dashboard', href: PATH_DASHBOARD.root }, { name: 'Private Chat' }]}\n        />\n        <ChatAdminMessageForm chatSettings={chatSettings} />\n        <Card sx={{ height: '72vh', display: 'flex' }}>\n          <ChatSidebar />\n          {socket && <ChatWindow socket={socket} />}\n        </Card>\n      </Container>\n    </Page>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}