{"ast":null,"code":"var _jsxFileName = \"E:\\\\dev\\\\admin_panel\\\\LocalsAdminPanel\\\\src\\\\components\\\\_dashboard\\\\privatechat\\\\ChatConversationItem.js\";\nimport { last } from 'lodash';\nimport PropTypes from 'prop-types';\nimport { formatDistanceToNowStrict } from 'date-fns'; // material\n\nimport { styled } from '@material-ui/core/styles';\nimport { Box, Avatar, ListItemText, ListItemAvatar, ListItemButton } from '@material-ui/core'; //\n\nimport BadgeStatus from '../../BadgeStatus';\nimport { serverConfig } from '../../../config'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AVATAR_SIZE = 48;\nconst AVATAR_SIZE_GROUP = 32;\nconst RootStyle = styled(ListItemButton)(({\n  theme\n}) => ({\n  padding: theme.spacing(1.5, 3),\n  transition: theme.transitions.create('all')\n}));\nconst AvatarWrapperStyle = styled('div')({\n  position: 'relative',\n  width: AVATAR_SIZE,\n  height: AVATAR_SIZE,\n  '& .MuiAvatar-img': {\n    borderRadius: '50%'\n  },\n  '& .MuiAvatar-root': {\n    width: '100%',\n    height: '100%'\n  }\n}); // ----------------------------------------------------------------------\n\nconst getDetails = (conversation, currentUserId) => {\n  const otherParticipants = conversation.participants.filter(participant => participant.id !== currentUserId);\n  const displayNames = otherParticipants.reduce((names, participant) => [...names, participant.name], []).join(', ');\n  let displayText = '';\n  const lastMessage = conversation.messages[conversation.messages.length - 1];\n\n  if (lastMessage) {\n    const sender = lastMessage.senderId === currentUserId ? 'You: ' : '';\n    const message = lastMessage.contentType === 'image' ? 'Sent a photo' : lastMessage.body;\n    displayText = `${sender}${message}`;\n  }\n\n  return {\n    otherParticipants,\n    displayNames,\n    displayText\n  };\n};\n\nChatConversationItem.propTypes = {\n  isSelected: PropTypes.bool,\n  opponent: PropTypes.object,\n  // conversation: PropTypes.object.isRequired,\n  isOpenSidebar: PropTypes.bool,\n  onSelectConversation: PropTypes.func\n};\nexport default function ChatConversationItem({\n  isSelected,\n  opponent,\n  conversation,\n  onSelectConversation,\n  isOpenSidebar,\n  ...other\n}) {\n  // const displayLastActivity = last(conversation.messages).createdAt;\n  const displayLastActivity = opponent.created; // const isGroup = details.otherParticipants.length > 1;\n\n  const isGroup = false; // const isUnread = conversation.unreadCount > 0;\n\n  const isUnread = false; // const isOnlineGroup = isGroup && details.otherParticipants.map((item) => item.status).includes('online');\n\n  const avatarImgSrc = `${serverConfig.baseUrl}/user/img-src/${opponent.avatarUrl}`;\n  const opponentStatus = opponent.online ? 'online' : 'offline';\n  const unreadCount = conversation && (conversation.lastMessage.users_see_message.indexOf(opponent._id) > -1 ? 0 : conversation.lastMessage.unread_count) || 0;\n  console.log(opponent._id);\n  return /*#__PURE__*/_jsxDEV(RootStyle, {\n    disableGutters: true,\n    onClick: onSelectConversation,\n    sx: { ...(isSelected && {\n        bgcolor: 'action.selected'\n      })\n    },\n    ...other,\n    children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: { ...(isGroup && {\n            position: 'relative',\n            width: AVATAR_SIZE,\n            height: AVATAR_SIZE,\n            '& .avatarWrapper': {\n              position: 'absolute',\n              width: AVATAR_SIZE_GROUP,\n              height: AVATAR_SIZE_GROUP,\n              '&:nth-of-type(1)': {\n                left: 0,\n                zIndex: 9,\n                bottom: 2,\n                '& .MuiAvatar-root': {\n                  border: theme => `solid 2px ${theme.palette.background.paper}`\n                }\n              },\n              '&:nth-of-type(2)': {\n                top: 2,\n                right: 0\n              }\n            }\n          })\n        },\n        children: /*#__PURE__*/_jsxDEV(AvatarWrapperStyle, {\n          className: \"avatarWrapper\",\n          children: [/*#__PURE__*/_jsxDEV(Avatar, {\n            alt: opponent.name,\n            src: avatarImgSrc\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(BadgeStatus, {\n            status: opponentStatus,\n            sx: {\n              right: 2,\n              bottom: 2,\n              position: 'absolute'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this)]\n        }, opponent._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), isOpenSidebar && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n        primary: opponent.name,\n        primaryTypographyProps: {\n          noWrap: true,\n          variant: 'subtitle2'\n        },\n        secondary: conversation && conversation.lastMessage.message,\n        secondaryTypographyProps: {\n          noWrap: true,\n          variant: isUnread ? 'subtitle2' : 'body2',\n          color: isUnread ? 'textPrimary' : 'textSecondary'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          ml: 2,\n          height: 44,\n          display: 'flex',\n          alignItems: 'flex-end',\n          flexDirection: 'column'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 1.25,\n            fontSize: 12,\n            lineHeight: '22px',\n            whiteSpace: 'nowrap',\n            color: 'text.disabled'\n          },\n          children: formatDistanceToNowStrict(new Date(displayLastActivity), {\n            addSuffix: false\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this), isUnread && /*#__PURE__*/_jsxDEV(BadgeStatus, {\n          status: \"unread\",\n          size: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["E:/dev/admin_panel/LocalsAdminPanel/src/components/_dashboard/privatechat/ChatConversationItem.js"],"names":["last","PropTypes","formatDistanceToNowStrict","styled","Box","Avatar","ListItemText","ListItemAvatar","ListItemButton","BadgeStatus","serverConfig","AVATAR_SIZE","AVATAR_SIZE_GROUP","RootStyle","theme","padding","spacing","transition","transitions","create","AvatarWrapperStyle","position","width","height","borderRadius","getDetails","conversation","currentUserId","otherParticipants","participants","filter","participant","id","displayNames","reduce","names","name","join","displayText","lastMessage","messages","length","sender","senderId","message","contentType","body","ChatConversationItem","propTypes","isSelected","bool","opponent","object","isOpenSidebar","onSelectConversation","func","other","displayLastActivity","created","isGroup","isUnread","avatarImgSrc","baseUrl","avatarUrl","opponentStatus","online","unreadCount","users_see_message","indexOf","_id","unread_count","console","log","bgcolor","left","zIndex","bottom","border","palette","background","paper","top","right","noWrap","variant","color","ml","display","alignItems","flexDirection","mb","fontSize","lineHeight","whiteSpace","Date","addSuffix"],"mappings":"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","sourcesContent":["import { last } from 'lodash';\nimport PropTypes from 'prop-types';\nimport { formatDistanceToNowStrict } from 'date-fns';\n// material\nimport { styled } from '@material-ui/core/styles';\nimport { Box, Avatar, ListItemText, ListItemAvatar, ListItemButton } from '@material-ui/core';\n//\nimport BadgeStatus from '../../BadgeStatus';\nimport { serverConfig } from '../../../config';\n\n// ----------------------------------------------------------------------\n\nconst AVATAR_SIZE = 48;\nconst AVATAR_SIZE_GROUP = 32;\n\nconst RootStyle = styled(ListItemButton)(({ theme }) => ({\n  padding: theme.spacing(1.5, 3),\n  transition: theme.transitions.create('all')\n}));\n\nconst AvatarWrapperStyle = styled('div')({\n  position: 'relative',\n  width: AVATAR_SIZE,\n  height: AVATAR_SIZE,\n  '& .MuiAvatar-img': { borderRadius: '50%' },\n  '& .MuiAvatar-root': { width: '100%', height: '100%' }\n});\n\n// ----------------------------------------------------------------------\n\nconst getDetails = (conversation, currentUserId) => {\n  const otherParticipants = conversation.participants.filter((participant) => participant.id !== currentUserId);\n  const displayNames = otherParticipants.reduce((names, participant) => [...names, participant.name], []).join(', ');\n  let displayText = '';\n  const lastMessage = conversation.messages[conversation.messages.length - 1];\n  if (lastMessage) {\n    const sender = lastMessage.senderId === currentUserId ? 'You: ' : '';\n    const message = lastMessage.contentType === 'image' ? 'Sent a photo' : lastMessage.body;\n    displayText = `${sender}${message}`;\n  }\n  return { otherParticipants, displayNames, displayText };\n};\n\nChatConversationItem.propTypes = {\n  isSelected: PropTypes.bool,\n  opponent: PropTypes.object,\n  // conversation: PropTypes.object.isRequired,\n  isOpenSidebar: PropTypes.bool,\n  onSelectConversation: PropTypes.func\n};\n\nexport default function ChatConversationItem({\n  isSelected,\n  opponent,\n  conversation,\n  onSelectConversation,\n  isOpenSidebar,\n  ...other\n}) {\n  // const displayLastActivity = last(conversation.messages).createdAt;\n  const displayLastActivity = opponent.created;\n  // const isGroup = details.otherParticipants.length > 1;\n  const isGroup = false;\n  // const isUnread = conversation.unreadCount > 0;\n  const isUnread = false;\n  // const isOnlineGroup = isGroup && details.otherParticipants.map((item) => item.status).includes('online');\n  const avatarImgSrc = `${serverConfig.baseUrl}/user/img-src/${opponent.avatarUrl}`;\n  const opponentStatus = opponent.online ? 'online' : 'offline';\n\n  const unreadCount =\n    (conversation &&\n      (conversation.lastMessage.users_see_message.indexOf(opponent._id) > -1\n        ? 0\n        : conversation.lastMessage.unread_count)) ||\n    0;\n  console.log(opponent._id);\n\n  return (\n    <RootStyle\n      disableGutters\n      onClick={onSelectConversation}\n      sx={{\n        ...(isSelected && { bgcolor: 'action.selected' })\n      }}\n      {...other}\n    >\n      <ListItemAvatar>\n        <Box\n          sx={{\n            ...(isGroup && {\n              position: 'relative',\n              width: AVATAR_SIZE,\n              height: AVATAR_SIZE,\n              '& .avatarWrapper': {\n                position: 'absolute',\n                width: AVATAR_SIZE_GROUP,\n                height: AVATAR_SIZE_GROUP,\n                '&:nth-of-type(1)': {\n                  left: 0,\n                  zIndex: 9,\n                  bottom: 2,\n                  '& .MuiAvatar-root': {\n                    border: (theme) => `solid 2px ${theme.palette.background.paper}`\n                  }\n                },\n                '&:nth-of-type(2)': { top: 2, right: 0 }\n              }\n            })\n          }}\n        >\n          {/* {details.otherParticipants.slice(0, 2).map((participant) => ( */}\n          <AvatarWrapperStyle className=\"avatarWrapper\" key={opponent._id}>\n            <Avatar alt={opponent.name} src={avatarImgSrc} />\n            <BadgeStatus status={opponentStatus} sx={{ right: 2, bottom: 2, position: 'absolute' }} />\n          </AvatarWrapperStyle>\n          {/* ))} */}\n          {/* {opponent.online && <BadgeStatus status=\"online\" sx={{ right: 2, bottom: 2, position: 'absolute' }} />} */}\n        </Box>\n      </ListItemAvatar>\n\n      {isOpenSidebar && (\n        <>\n          <ListItemText\n            primary={opponent.name}\n            primaryTypographyProps={{\n              noWrap: true,\n              variant: 'subtitle2'\n            }}\n            secondary={conversation && conversation.lastMessage.message}\n            secondaryTypographyProps={{\n              noWrap: true,\n              variant: isUnread ? 'subtitle2' : 'body2',\n              color: isUnread ? 'textPrimary' : 'textSecondary'\n            }}\n          />\n\n          <Box\n            sx={{\n              ml: 2,\n              height: 44,\n              display: 'flex',\n              alignItems: 'flex-end',\n              flexDirection: 'column'\n            }}\n          >\n            <Box\n              sx={{\n                mb: 1.25,\n                fontSize: 12,\n                lineHeight: '22px',\n                whiteSpace: 'nowrap',\n                color: 'text.disabled'\n              }}\n            >\n              {formatDistanceToNowStrict(new Date(displayLastActivity), {\n                addSuffix: false\n              })}\n            </Box>\n            {isUnread && <BadgeStatus status=\"unread\" size=\"small\" />}\n          </Box>\n        </>\n      )}\n    </RootStyle>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}