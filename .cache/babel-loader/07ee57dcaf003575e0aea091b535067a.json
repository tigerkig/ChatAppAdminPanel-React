{"ast":null,"code":"var _jsxFileName = \"E:\\\\dev\\\\admin_panel\\\\LocalsAdminPanel\\\\src\\\\layouts\\\\dashboard\\\\ContactsPopover.js\";\nimport { Icon } from '@iconify/react';\nimport { useRef, useState, useCallback, useEffect } from 'react';\nimport peopleFill from '@iconify/icons-eva/people-fill'; // material\n\nimport { alpha } from '@material-ui/core/styles';\nimport { ListItemAvatar, Typography, ListItemText, Avatar, ListItemButton } from '@material-ui/core'; // hooks\n\nimport useIsMountedRef from '../../hooks/useIsMountedRef'; // utils\n\nimport axios from '../../utils/axios';\nimport { fToNow } from '../../utils/formatTime'; // components\n\nimport Scrollbar from '../../components/Scrollbar';\nimport MenuPopover from '../../components/MenuPopover';\nimport BadgeStatus from '../../components/BadgeStatus';\nimport { MIconButton } from '../../components/@material-extend'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ITEM_HEIGHT = 64;\nconst PADDING_ITEM = 2.5;\nexport default function ContactsPopover() {\n  const anchorRef = useRef(null);\n  const isMountedRef = useIsMountedRef();\n  const [open, setOpen] = useState(false);\n  const [contacts, setContacts] = useState([]);\n  const getContacts = useCallback(async () => {\n    try {\n      const response = await axios.get('/api/chat/contacts');\n\n      if (isMountedRef.current) {\n        setContacts(response.data.contacts);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }, [isMountedRef]);\n  useEffect(() => {\n    getContacts();\n  }, [getContacts]);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MIconButton, {\n      ref: anchorRef,\n      size: \"large\",\n      color: open ? 'primary' : 'default',\n      onClick: handleOpen,\n      sx: { ...(open && {\n          bgcolor: theme => alpha(theme.palette.primary.main, theme.palette.action.focusOpacity)\n        })\n      },\n      children: /*#__PURE__*/_jsxDEV(Icon, {\n        icon: peopleFill,\n        width: 20,\n        height: 20\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MenuPopover, {\n      open: open,\n      onClose: handleClose,\n      anchorEl: anchorRef.current,\n      sx: {\n        width: 360\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          p: PADDING_ITEM\n        },\n        children: [\"Contacts \", /*#__PURE__*/_jsxDEV(Typography, {\n          component: \"span\",\n          children: [\"(\", contacts.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 20\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Scrollbar, {\n        sx: {\n          height: ITEM_HEIGHT * 8\n        },\n        children: contacts.map(contact => {\n          const {\n            id,\n            name,\n            avatar,\n            status,\n            lastActivity\n          } = contact;\n          return /*#__PURE__*/_jsxDEV(ListItemButton, {\n            disableGutters: true,\n            sx: {\n              px: PADDING_ITEM,\n              height: ITEM_HEIGHT\n            },\n            children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n              sx: {\n                position: 'relative'\n              },\n              children: [/*#__PURE__*/_jsxDEV(Avatar, {\n                src: avatar\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(BadgeStatus, {\n                status: status,\n                sx: {\n                  position: 'absolute',\n                  right: 1,\n                  bottom: 1\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n              primaryTypographyProps: {\n                typography: 'subtitle2',\n                mb: 0.25\n              },\n              secondaryTypographyProps: {\n                typography: 'caption'\n              },\n              primary: name,\n              secondary: status === 'offline' && fToNow(lastActivity)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 17\n            }, this)]\n          }, id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}","map":{"version":3,"sources":["E:/dev/admin_panel/LocalsAdminPanel/src/layouts/dashboard/ContactsPopover.js"],"names":["Icon","useRef","useState","useCallback","useEffect","peopleFill","alpha","ListItemAvatar","Typography","ListItemText","Avatar","ListItemButton","useIsMountedRef","axios","fToNow","Scrollbar","MenuPopover","BadgeStatus","MIconButton","ITEM_HEIGHT","PADDING_ITEM","ContactsPopover","anchorRef","isMountedRef","open","setOpen","contacts","setContacts","getContacts","response","get","current","data","error","console","handleOpen","handleClose","bgcolor","theme","palette","primary","main","action","focusOpacity","width","p","length","height","map","contact","id","name","avatar","status","lastActivity","px","position","right","bottom","typography","mb"],"mappings":"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","sourcesContent":["import { Icon } from '@iconify/react';\nimport { useRef, useState, useCallback, useEffect } from 'react';\nimport peopleFill from '@iconify/icons-eva/people-fill';\n// material\nimport { alpha } from '@material-ui/core/styles';\nimport { ListItemAvatar, Typography, ListItemText, Avatar, ListItemButton } from '@material-ui/core';\n// hooks\nimport useIsMountedRef from '../../hooks/useIsMountedRef';\n// utils\nimport axios from '../../utils/axios';\nimport { fToNow } from '../../utils/formatTime';\n// components\nimport Scrollbar from '../../components/Scrollbar';\nimport MenuPopover from '../../components/MenuPopover';\nimport BadgeStatus from '../../components/BadgeStatus';\nimport { MIconButton } from '../../components/@material-extend';\n\n// ----------------------------------------------------------------------\n\nconst ITEM_HEIGHT = 64;\nconst PADDING_ITEM = 2.5;\n\nexport default function ContactsPopover() {\n  const anchorRef = useRef(null);\n  const isMountedRef = useIsMountedRef();\n  const [open, setOpen] = useState(false);\n  const [contacts, setContacts] = useState([]);\n\n  const getContacts = useCallback(async () => {\n    try {\n      const response = await axios.get('/api/chat/contacts');\n      if (isMountedRef.current) {\n        setContacts(response.data.contacts);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }, [isMountedRef]);\n\n  useEffect(() => {\n    getContacts();\n  }, [getContacts]);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <MIconButton\n        ref={anchorRef}\n        size=\"large\"\n        color={open ? 'primary' : 'default'}\n        onClick={handleOpen}\n        sx={{\n          ...(open && {\n            bgcolor: (theme) => alpha(theme.palette.primary.main, theme.palette.action.focusOpacity)\n          })\n        }}\n      >\n        <Icon icon={peopleFill} width={20} height={20} />\n      </MIconButton>\n\n      <MenuPopover open={open} onClose={handleClose} anchorEl={anchorRef.current} sx={{ width: 360 }}>\n        <Typography variant=\"h6\" sx={{ p: PADDING_ITEM }}>\n          Contacts <Typography component=\"span\">({contacts.length})</Typography>\n        </Typography>\n\n        <Scrollbar sx={{ height: ITEM_HEIGHT * 8 }}>\n          {contacts.map((contact) => {\n            const { id, name, avatar, status, lastActivity } = contact;\n\n            return (\n              <ListItemButton disableGutters key={id} sx={{ px: PADDING_ITEM, height: ITEM_HEIGHT }}>\n                <ListItemAvatar sx={{ position: 'relative' }}>\n                  <Avatar src={avatar} />\n                  <BadgeStatus status={status} sx={{ position: 'absolute', right: 1, bottom: 1 }} />\n                </ListItemAvatar>\n                <ListItemText\n                  primaryTypographyProps={{ typography: 'subtitle2', mb: 0.25 }}\n                  secondaryTypographyProps={{ typography: 'caption' }}\n                  primary={name}\n                  secondary={status === 'offline' && fToNow(lastActivity)}\n                />\n              </ListItemButton>\n            );\n          })}\n        </Scrollbar>\n      </MenuPopover>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}